import React, { ReactNode } from 'react';
import { ChipsInputOption, ChipsInputProps, RenderChip } from '../ChipsInput/ChipsInput';
import { CustomSelectOptionProps } from '../CustomSelectOption/CustomSelectOption';
import { AdaptivityProps } from '../../hoc/withAdaptivity';
export interface ChipsSelectProps<Option extends ChipsInputOption> extends ChipsInputProps<Option>, AdaptivityProps {
    popupDirection?: 'top' | 'bottom';
    options?: Option[];
    filterFn?: (value?: string, option?: Option, getOptionLabel?: Pick<ChipsInputProps<ChipsInputOption>, 'getOptionLabel'>['getOptionLabel']) => boolean;
    /**
     * Возможность создавать чипы которых нет в списке (по enter или с помощью пункта в меню, см creatableText)
     */
    creatable?: boolean;
    /**
     * Отрисовка лоадера вместо списка опций в выпадающем списке
     */
    fetching?: boolean;
    renderOption?: (props: CustomSelectOptionProps) => ReactNode;
    /**
     * Показывать или скрывать уже выбранные опции
     */
    showSelected?: boolean;
    /**
     * Текст для пункта создающего чипы при клике, так же отвечает за то будет ли показан этот пункт (показывается после того как в списке не отсанется опций)
     */
    creatableText?: string;
    /**
     * Текст который показывается если список опций пуст
     */
    emptyText?: string;
    /**
     * Событие срабатывающее перед onChange
     */
    onChangeStart?: (e: React.MouseEvent | React.KeyboardEvent, option: Option) => void;
    /**
     * Закрытие выпадающиего списка после выбора элемента
     */
    closeAfterSelect?: boolean;
}
declare const _default: {
    <Option extends ChipsInputOption>(props: ChipsSelectProps<Option>): JSX.Element;
    defaultProps: {
        emptyText: string;
        creatableText: string;
        onChangeStart: () => void;
        creatable: boolean;
        fetching: boolean;
        showSelected: boolean;
        closeAfterSelect: boolean;
        options: any[];
        filterFn: (value?: string, option?: ChipsInputOption, getOptionLabel?: (o?: ChipsInputOption) => string) => boolean;
        renderOption(props: CustomSelectOptionProps): React.ReactNode;
        value: any[];
        inputValue?: string;
        onChange?: (o: any[]) => void;
        onInputChange?: (e?: React.ChangeEvent<HTMLInputElement>) => void;
        getOptionValue?: (o?: any) => string | number;
        getOptionLabel?: (o?: any) => string;
        getNewOptionData?: (v?: string | number, l?: string) => any;
        renderChip?: (props?: RenderChip<any>) => React.ReactNode;
        style?: React.CSSProperties;
        placeholder?: string;
        title?: string;
        disabled?: boolean;
        hidden?: boolean;
        required?: boolean;
        checked?: boolean;
        role?: string;
        security?: string;
        max?: string | number;
        dir?: string;
        form?: string;
        slot?: string;
        name?: string;
        color?: string;
        size?: number;
        multiple?: boolean;
        height?: string | number;
        translate?: "no" | "yes";
        width?: string | number;
        prefix?: string;
        src?: string;
        pattern?: string;
        children?: React.ReactNode;
        className?: string;
        id?: string;
        lang?: string;
        min?: string | number;
        type?: string;
        tabIndex?: number;
        crossOrigin?: string;
        'aria-activedescendant'?: string;
        'aria-atomic'?: boolean | "false" | "true";
        'aria-autocomplete'?: "none" | "both" | "inline" | "list";
        'aria-busy'?: boolean | "false" | "true";
        'aria-checked'?: boolean | "mixed" | "false" | "true";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: boolean | "date" | "time" | "page" | "location" | "false" | "true" | "step";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: boolean | "false" | "true";
        'aria-dropeffect'?: "none" | "link" | "popup" | "copy" | "move" | "execute";
        'aria-errormessage'?: string;
        'aria-expanded'?: boolean | "false" | "true";
        'aria-flowto'?: string;
        'aria-grabbed'?: boolean | "false" | "true";
        'aria-haspopup'?: boolean | "dialog" | "menu" | "listbox" | "grid" | "false" | "true" | "tree";
        'aria-hidden'?: boolean | "false" | "true";
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: boolean | "false" | "true";
        'aria-multiline'?: boolean | "false" | "true";
        'aria-multiselectable'?: boolean | "false" | "true";
        'aria-orientation'?: "vertical" | "horizontal";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "false" | "true";
        'aria-readonly'?: boolean | "false" | "true";
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
        'aria-required'?: boolean | "false" | "true";
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: boolean | "false" | "true";
        'aria-setsize'?: number;
        'aria-sort'?: "other" | "none" | "ascending" | "descending";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        dangerouslySetInnerHTML?: {
            __html: string;
        };
        onCopy?: (event: React.ClipboardEvent<HTMLInputElement>) => void;
        onCopyCapture?: (event: React.ClipboardEvent<HTMLInputElement>) => void;
        onCut?: (event: React.ClipboardEvent<HTMLInputElement>) => void;
        onCutCapture?: (event: React.ClipboardEvent<HTMLInputElement>) => void;
        onPaste?: (event: React.ClipboardEvent<HTMLInputElement>) => void;
        onPasteCapture?: (event: React.ClipboardEvent<HTMLInputElement>) => void;
        onCompositionEnd?: (event: React.CompositionEvent<HTMLInputElement>) => void;
        onCompositionEndCapture?: (event: React.CompositionEvent<HTMLInputElement>) => void;
        onCompositionStart?: (event: React.CompositionEvent<HTMLInputElement>) => void;
        onCompositionStartCapture?: (event: React.CompositionEvent<HTMLInputElement>) => void;
        onCompositionUpdate?: (event: React.CompositionEvent<HTMLInputElement>) => void;
        onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLInputElement>) => void;
        onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;
        onFocusCapture?: (event: React.FocusEvent<HTMLInputElement>) => void;
        onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;
        onBlurCapture?: (event: React.FocusEvent<HTMLInputElement>) => void;
        onChangeCapture?: (event: React.FormEvent<HTMLInputElement>) => void;
        onBeforeInput?: (event: React.FormEvent<HTMLInputElement>) => void;
        onBeforeInputCapture?: (event: React.FormEvent<HTMLInputElement>) => void;
        onInput?: (event: React.FormEvent<HTMLInputElement>) => void;
        onInputCapture?: (event: React.FormEvent<HTMLInputElement>) => void;
        onReset?: (event: React.FormEvent<HTMLInputElement>) => void;
        onResetCapture?: (event: React.FormEvent<HTMLInputElement>) => void;
        onSubmit?: (event: React.FormEvent<HTMLInputElement>) => void;
        onSubmitCapture?: (event: React.FormEvent<HTMLInputElement>) => void;
        onInvalid?: (event: React.FormEvent<HTMLInputElement>) => void;
        onInvalidCapture?: (event: React.FormEvent<HTMLInputElement>) => void;
        onLoad?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onLoadCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onError?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onErrorCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
        onKeyDownCapture?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
        onKeyPress?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
        onKeyPressCapture?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
        onKeyUp?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
        onKeyUpCapture?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
        onAbort?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onAbortCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onCanPlay?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onCanPlayCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onCanPlayThrough?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onDurationChange?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onEmptied?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onEmptiedCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onEncrypted?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onEncryptedCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onEnded?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onEndedCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onLoadedData?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onLoadedMetadata?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onLoadStart?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onLoadStartCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onPause?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onPauseCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onPlay?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onPlayCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onPlaying?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onPlayingCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onProgress?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onProgressCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onRateChange?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onRateChangeCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onSeeked?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onSeekedCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onSeeking?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onSeekingCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onStalled?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onStalledCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onSuspend?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onSuspendCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onTimeUpdate?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onVolumeChange?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onWaiting?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onWaitingCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onAuxClick?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onAuxClickCapture?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onClick?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onClickCapture?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onContextMenu?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onContextMenuCapture?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onDoubleClick?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onDoubleClickCapture?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onDrag?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDragCapture?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDragEnd?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDragEndCapture?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDragEnter?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDragEnterCapture?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDragExit?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDragExitCapture?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDragLeave?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDragLeaveCapture?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDragOver?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDragOverCapture?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDragStart?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDragStartCapture?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDrop?: (event: React.DragEvent<HTMLInputElement>) => void;
        onDropCapture?: (event: React.DragEvent<HTMLInputElement>) => void;
        onMouseDown?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onMouseDownCapture?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onMouseEnter?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onMouseLeave?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onMouseMove?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onMouseMoveCapture?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onMouseOut?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onMouseOutCapture?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onMouseOver?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onMouseOverCapture?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onMouseUp?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onMouseUpCapture?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
        onSelect?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onSelectCapture?: (event: React.SyntheticEvent<HTMLInputElement, Event>) => void;
        onTouchCancel?: (event: React.TouchEvent<HTMLInputElement>) => void;
        onTouchCancelCapture?: (event: React.TouchEvent<HTMLInputElement>) => void;
        onTouchEnd?: (event: React.TouchEvent<HTMLInputElement>) => void;
        onTouchEndCapture?: (event: React.TouchEvent<HTMLInputElement>) => void;
        onTouchMove?: (event: React.TouchEvent<HTMLInputElement>) => void;
        onTouchMoveCapture?: (event: React.TouchEvent<HTMLInputElement>) => void;
        onTouchStart?: (event: React.TouchEvent<HTMLInputElement>) => void;
        onTouchStartCapture?: (event: React.TouchEvent<HTMLInputElement>) => void;
        onPointerDown?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerDownCapture?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerMove?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerMoveCapture?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerUp?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerUpCapture?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerCancel?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerCancelCapture?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerEnter?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerEnterCapture?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerLeave?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerLeaveCapture?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerOver?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerOverCapture?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerOut?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onPointerOutCapture?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onGotPointerCapture?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onLostPointerCapture?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLInputElement>) => void;
        onScroll?: (event: React.UIEvent<HTMLInputElement, UIEvent>) => void;
        onScrollCapture?: (event: React.UIEvent<HTMLInputElement, UIEvent>) => void;
        onWheel?: (event: React.WheelEvent<HTMLInputElement>) => void;
        onWheelCapture?: (event: React.WheelEvent<HTMLInputElement>) => void;
        onAnimationStart?: (event: React.AnimationEvent<HTMLInputElement>) => void;
        onAnimationStartCapture?: (event: React.AnimationEvent<HTMLInputElement>) => void;
        onAnimationEnd?: (event: React.AnimationEvent<HTMLInputElement>) => void;
        onAnimationEndCapture?: (event: React.AnimationEvent<HTMLInputElement>) => void;
        onAnimationIteration?: (event: React.AnimationEvent<HTMLInputElement>) => void;
        onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLInputElement>) => void;
        onTransitionEnd?: (event: React.TransitionEvent<HTMLInputElement>) => void;
        onTransitionEndCapture?: (event: React.TransitionEvent<HTMLInputElement>) => void;
        defaultChecked?: boolean;
        defaultValue?: string | number | readonly string[];
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        contentEditable?: boolean | "inherit" | "false" | "true";
        contextMenu?: string;
        draggable?: boolean | "false" | "true";
        spellCheck?: boolean | "false" | "true";
        radioGroup?: string;
        about?: string;
        datatype?: string;
        inlist?: any;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        unselectable?: "on" | "off";
        inputMode?: "none" | "search" | "text" | "numeric" | "tel" | "url" | "email" | "decimal";
        is?: string;
        alt?: string;
        autoFocus?: boolean;
        formAction?: string;
        formEncType?: string;
        formMethod?: string;
        formNoValidate?: boolean;
        formTarget?: string;
        autoComplete?: string;
        accept?: string;
        capture?: string | boolean;
        list?: string;
        maxLength?: number;
        minLength?: number;
        readOnly?: boolean;
        step?: string | number;
        getRef?: import("../../types").Ref<HTMLInputElement>;
        getRootRef?: import("../../types").Ref<HTMLDivElement>;
        align?: "left" | "right" | "center";
        after?: React.ReactNode;
        sizeX?: import("../AdaptivityProvider/AdaptivityContext").SizeType;
        sizeY?: import("../AdaptivityProvider/AdaptivityContext").SizeType;
        viewWidth?: import("../AdaptivityProvider/AdaptivityContext").ViewWidth;
        viewHeight?: import("../AdaptivityProvider/AdaptivityContext").ViewHeight;
        hasMouse?: boolean;
    };
};
export default _default;
