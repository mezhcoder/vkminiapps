import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { useMemo, useState } from 'react';
import { useChipsInput } from "../ChipsInput/useChipsInput";
export var useChipsSelect = function useChipsSelect(props) {
  var options = props.options,
      filterFn = props.filterFn,
      getOptionLabel = props.getOptionLabel,
      getOptionValue = props.getOptionValue,
      showSelected = props.showSelected;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      opened = _useState2[0],
      setOpened = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      focusedOptionIndex = _useState4[0],
      setFocusedOptionIndex = _useState4[1];

  var _useState5 = useState(null),
      _useState6 = _slicedToArray(_useState5, 2),
      focusedOption = _useState6[0],
      setFocusedOption = _useState6[1];

  var _useChipsInput = useChipsInput(props),
      fieldValue = _useChipsInput.fieldValue,
      selectedOptions = _useChipsInput.selectedOptions,
      chipsInputState = _objectWithoutProperties(_useChipsInput, ["fieldValue", "selectedOptions"]);

  var handleInputChange = function handleInputChange(e) {
    chipsInputState.handleInputChange(e);

    if (!opened) {
      setOpened(true);
      setFocusedOptionIndex(0);
    }
  };

  var filteredOptions = useMemo(function () {
    return options.filter(function (option) {
      return filterFn(fieldValue, option, getOptionLabel);
    });
  }, [options, filterFn, fieldValue, getOptionLabel]);
  filteredOptions = useMemo(function () {
    if (!filteredOptions.length) {
      return filteredOptions;
    }

    var filteredSet = new Set(filteredOptions);
    var selected = selectedOptions.map(function (item) {
      return getOptionValue(item);
    });

    var _iterator = _createForOfIteratorHelper(filteredSet),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var item = _step.value;

        if (selected.includes(getOptionValue(item))) {
          filteredSet.delete(item);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return _toConsumableArray(filteredSet);
  }, [showSelected, filteredOptions, selectedOptions]);
  return _objectSpread(_objectSpread({}, chipsInputState), {}, {
    fieldValue: fieldValue,
    handleInputChange: handleInputChange,
    opened: opened,
    setOpened: setOpened,
    filteredOptions: filteredOptions,
    focusedOptionIndex: focusedOptionIndex,
    setFocusedOptionIndex: setFocusedOptionIndex,
    focusedOption: focusedOption,
    setFocusedOption: setFocusedOption,
    selectedOptions: selectedOptions
  });
};
//# sourceMappingURL=useChipsSelect.js.map