import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createScopedElement } from "../../lib/jsxRuntime";
import { Fragment } from 'react';
import { getClassName } from "../../helpers/getClassName";
import { classNames } from "../../lib/classNames";
import { usePlatform } from "../../hooks/usePlatform";
import { hasReactNode, isPrimitiveReactNode } from "../../lib/utils";
import { Platform } from "../../lib/platform";
import Headline from "../Typography/Headline/Headline";
import Caption from "../Typography/Caption/Caption";
import Title from "../Typography/Title/Title";
import Text from "../Typography/Text/Text";
import Subhead from "../Typography/Subhead/Subhead";

function renderChildren(_ref) {
  var children = _ref.children,
      platform = _ref.platform,
      mode = _ref.mode;

  switch (platform) {
    case Platform.ANDROID:
      switch (mode) {
        case 'primary':
          return createScopedElement(Headline, {
            vkuiClass: "Header__content",
            weight: "medium"
          }, children);

        case 'secondary':
          return createScopedElement(Caption, {
            vkuiClass: "Header__content",
            level: "1",
            weight: "medium",
            caps: true
          }, children);

        case 'tertiary':
          return createScopedElement(Headline, {
            vkuiClass: "Header__content",
            weight: "medium"
          }, children);
      }

      break;

    case Platform.IOS:
      switch (mode) {
        case 'primary':
        case 'tertiary':
          return createScopedElement(Title, {
            vkuiClass: "Header__content",
            weight: "semibold",
            level: "3"
          }, children);

        case 'secondary':
          return createScopedElement(Caption, {
            vkuiClass: "Header__content",
            level: "1",
            weight: "semibold",
            caps: true
          }, children);
      }

      break;

    case Platform.VKCOM:
      switch (mode) {
        case 'primary':
          return createScopedElement(Headline, {
            vkuiClass: "Header__content",
            weight: "regular"
          }, children);

        case 'secondary':
        case 'tertiary':
          return createScopedElement(Caption, {
            vkuiClass: "Header__content",
            level: "1",
            weight: "regular"
          }, children);
      }

  }
}

function renderAside(_ref2) {
  var aside = _ref2.aside,
      platform = _ref2.platform;

  if (platform === Platform.VKCOM) {
    return createScopedElement(Subhead, {
      weight: "regular",
      vkuiClass: "Header__aside"
    }, aside);
  }

  return createScopedElement(Text, {
    weight: "regular",
    vkuiClass: "Header__aside"
  }, aside);
}

var Header = function Header(_ref3) {
  var mode = _ref3.mode,
      children = _ref3.children,
      subtitle = _ref3.subtitle,
      indicator = _ref3.indicator,
      aside = _ref3.aside,
      getRootRef = _ref3.getRootRef,
      multiline = _ref3.multiline,
      restProps = _objectWithoutProperties(_ref3, ["mode", "children", "subtitle", "indicator", "aside", "getRootRef", "multiline"]);

  var platform = usePlatform();
  var baseClassNames = getClassName('Header', platform);
  return createScopedElement("div", _extends({}, restProps, {
    ref: getRootRef,
    vkuiClass: classNames(baseClassNames, "Header--mode-".concat(mode), {
      'Header--pi': isPrimitiveReactNode(indicator)
    })
  }), createScopedElement("div", {
    vkuiClass: "Header__in"
  }, createScopedElement("div", {
    vkuiClass: "Header__main"
  }, renderChildren({
    children: createScopedElement(Fragment, null, createScopedElement("div", {
      vkuiClass: classNames('Header__content-base', {
        'Header__content-base--multiline': multiline
      })
    }, children), hasReactNode(indicator) && createScopedElement(Caption, {
      vkuiClass: "Header__indicator",
      weight: "regular",
      level: "1"
    }, indicator)),
    platform: platform,
    mode: mode
  }), hasReactNode(subtitle) && createScopedElement(Caption, {
    vkuiClass: "Header__subtitle",
    weight: "regular",
    level: "1"
  }, subtitle)), hasReactNode(aside) && renderAside({
    aside: aside,
    platform: platform
  })));
};

Header.defaultProps = {
  mode: 'primary'
};
export default Header;
//# sourceMappingURL=Header.js.map