import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { createScopedElement } from "../../lib/jsxRuntime";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { getClassName } from "../../helpers/getClassName";
import { classNames } from "../../lib/classNames";
import { transitionEndEventName, transitionStartEventName } from "../View/View";
import { withContext } from "../../hoc/withContext";
import { withPlatform } from "../../hoc/withPlatform";
import { withPanelContext } from "../Panel/withPanelContext";
import { setRef } from "../../lib/utils";
import { SplitColContext } from "../SplitCol/SplitCol";
import { TooltipContainer } from "../Tooltip/TooltipContainer";
import { withDOM } from "../../lib/dom";
import { IOS } from "../../lib/platform";

var FixedLayout = /*#__PURE__*/function (_React$Component) {
  _inherits(FixedLayout, _React$Component);

  var _super = _createSuper(FixedLayout);

  function FixedLayout() {
    var _this;

    _classCallCheck(this, FixedLayout);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      position: 'absolute',
      top: null,
      bottom: null,
      width: ''
    });

    _defineProperty(_assertThisInitialized(_this), "el", void 0);

    _defineProperty(_assertThisInitialized(_this), "onMountResizeTimeout", void 0);

    _defineProperty(_assertThisInitialized(_this), "onViewTransitionStart", function (e) {
      var panelScroll = e.detail.scrolls[_this.props.panel] || 0; // support for unstable ViewInfinite

      if (Array.isArray(panelScroll)) {
        var scrolls = panelScroll; // ViewInfinite может открвыать одну и ту же панель несколько раз,
        // поэтому учитываем скролл панели только если это это панель с которой уходим, либо переход назад

        panelScroll = e.detail.isBack || _this.props.panel === e.detail.from ? scrolls[scrolls.length - 1] || 0 : 0;
      }

      var fromPanelHasScroll = _this.props.panel === e.detail.from && panelScroll > 0;
      var toPanelHasScroll = _this.props.panel === e.detail.to && panelScroll > 0; // если переход назад на Android - анимация только у панели с которой уходим (detail.from), и подстраиваться под скролл надо только на ней
      // на iOS переход между панелями горизонтальный, поэтому там нужно подстраивать хедеры на обеих панелях

      var panelAnimated = _this.props.platform === IOS || !(_this.props.panel === e.detail.to && e.detail.isBack); // Для панелей, с которых уходим всегда выставляется скролл
      // Для панелей на которые приходим надо смотреть, есть ли браузерный скролл и применяется ли к ней анимация перехода:

      if (fromPanelHasScroll || toPanelHasScroll && _this.canTargetPanelScroll && panelAnimated) {
        _this.setState({
          position: 'absolute',
          top: _this.props.vertical === 'top' || fromPanelHasScroll ? _this.el.offsetTop + panelScroll : null,
          bottom: _this.props.vertical === 'bottom' && !fromPanelHasScroll ? -panelScroll : null,
          width: ''
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onViewTransitionEnd", function () {
      _this.setState({
        position: null,
        top: null,
        bottom: null
      });

      _this.doResize();
    });

    _defineProperty(_assertThisInitialized(_this), "doResize", function () {
      var colRef = _this.props.splitCol.colRef;

      if (colRef && colRef.current) {
        var node = colRef.current;
        var width = node.offsetWidth;

        _this.setState({
          width: "".concat(width, "px"),
          position: null
        });
      } else {
        _this.setState({
          width: '',
          position: null
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getRef", function (element) {
      _this.el = element;
      setRef(element, _this.props.getRootRef);
    });

    return _this;
  }

  _createClass(FixedLayout, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.onMountResizeTimeout = setTimeout(function () {
        return _this2.doResize();
      });
      this.window.addEventListener('resize', this.doResize);
      this.document.addEventListener(transitionStartEventName, this.onViewTransitionStart);
      this.document.addEventListener(transitionEndEventName, this.onViewTransitionEnd);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearInterval(this.onMountResizeTimeout);
      this.window.removeEventListener('resize', this.doResize);
      this.document.removeEventListener(transitionStartEventName, this.onViewTransitionStart);
      this.document.removeEventListener(transitionEndEventName, this.onViewTransitionEnd);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          style = _this$props.style,
          vertical = _this$props.vertical,
          getRootRef = _this$props.getRootRef,
          getRef = _this$props.getRef,
          platform = _this$props.platform,
          filled = _this$props.filled,
          splitCol = _this$props.splitCol,
          panel = _this$props.panel,
          getPanelNode = _this$props.getPanelNode,
          window = _this$props.window,
          document = _this$props.document,
          restProps = _objectWithoutProperties(_this$props, ["children", "style", "vertical", "getRootRef", "getRef", "platform", "filled", "splitCol", "panel", "getPanelNode", "window", "document"]);

      return createScopedElement(TooltipContainer, _extends({}, restProps, {
        fixed: true,
        ref: this.getRef,
        vkuiClass: classNames(getClassName('FixedLayout', platform), {
          'FixedLayout--filled': filled
        }, "FixedLayout--".concat(vertical)),
        style: _objectSpread(_objectSpread({}, style), this.state)
      }), createScopedElement("div", {
        vkuiClass: "FixedLayout__in",
        ref: getRef
      }, children));
    }
  }, {
    key: "document",
    get: function get() {
      return this.props.document;
    }
  }, {
    key: "window",
    get: function get() {
      return this.props.window;
    }
  }, {
    key: "currentPanel",
    get: function get() {
      var elem = this.props.getPanelNode();

      if (!elem) {
        console.warn('[VKUI/FixedLayout] Panel element not found');
      }

      return elem;
    }
  }, {
    key: "canTargetPanelScroll",
    get: function get() {
      var panelEl = this.currentPanel;

      if (!panelEl) {
        return true; // Всегда предпологаем, что может быть скролл в случае, если нет document
      }

      return panelEl.scrollHeight > panelEl.clientHeight;
    }
  }]);

  return FixedLayout;
}(React.Component);

export default withContext(withPlatform(withPanelContext(withDOM(FixedLayout))), SplitColContext, 'splitCol');
//# sourceMappingURL=FixedLayout.js.map