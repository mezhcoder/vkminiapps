import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createScopedElement } from "../../lib/jsxRuntime";
import { useEffect, useMemo, useRef, useState } from 'react';
import { useDOM } from "../../lib/dom";
import { classNames } from "../../lib/classNames";
import { AppRootContext } from "./AppRootContext";
import { withAdaptivity, SizeType } from "../../hoc/withAdaptivity";
import { useIsomorphicLayoutEffect } from "../../lib/useIsomorphicLayoutEffect";
import { classScopingMode } from "../../lib/classScopingMode";
import { IconSettingsProvider } from '@vkontakte/icons';
import { elementScrollController, globalScrollController, ScrollContext } from "./ScrollContext"; // Используйте classList, но будьте осторожны

/* eslint-disable no-restricted-properties */

function applyAdaptivityStyles(container, sizeX) {
  if (sizeX === SizeType.REGULAR) {
    container.classList.add('vkui--sizeX-regular');
  } else {
    container.classList.remove('vkui--sizeX-regular');
  }
}

var AppRoot = function AppRoot(_ref) {
  var children = _ref.children,
      embedded = _ref.embedded,
      sizeX = _ref.sizeX,
      hasMouse = _ref.hasMouse,
      _ref$noLegacyClasses = _ref.noLegacyClasses,
      noLegacyClasses = _ref$noLegacyClasses === void 0 ? false : _ref$noLegacyClasses,
      _ref$scroll = _ref.scroll,
      scroll = _ref$scroll === void 0 ? 'global' : _ref$scroll,
      props = _objectWithoutProperties(_ref, ["children", "embedded", "sizeX", "hasMouse", "noLegacyClasses", "scroll"]);

  var rootRef = useRef();

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      portalRoot = _useState2[0],
      setPortalRoot = _useState2[1];

  var _useDOM = useDOM(),
      window = _useDOM.window,
      document = _useDOM.document;

  var initialized = useRef(false);

  if (!initialized.current) {
    if (window && !embedded) {
      document.documentElement.classList.add('vkui');
    }

    classScopingMode.noConflict = noLegacyClasses;
  }

  useEffect(function () {
    if (scroll !== 'global' && !embedded) {
      console.warn('[VKUI/AppRoot] Scroll modes only supported in embedded mode');
    }
  }, [scroll]); // one time initialization and cleanup

  useIsomorphicLayoutEffect(function () {
    var doc = document.documentElement;
    var body = document.body;
    var parentNode = rootRef.current.parentElement;
    var portal;

    if (embedded) {
      portal = document.createElement('div');
      portal.classList.add('vkui__portal-root');
      body.appendChild(portal);
      setPortalRoot(portal);
      parentNode.classList.add('vkui__root', 'vkui__root--embedded');
    } else {
      parentNode.classList.add('vkui__root');
    }

    initialized.current = true;
    return function () {
      if (embedded) {
        parentNode.classList.remove('vkui__root', 'vkui__root--embedded', 'vkui--sizeX-regular');
        portal.parentElement.removeChild(portal);
      } else {
        parentNode.classList.remove('vkui__root');
        body.classList.remove('vkui__root', 'vkui--sizeX-regular');
        doc.classList.remove('vkui');
      }
    };
  }, []); // adaptivity handler

  useIsomorphicLayoutEffect(function () {
    return applyAdaptivityStyles(embedded ? rootRef.current.parentElement : document.body, sizeX);
  }, [sizeX]);
  var scrollController = useMemo(function () {
    return scroll === 'contain' ? elementScrollController(rootRef) : globalScrollController(window, document);
  }, [scroll]);
  return createScopedElement("div", _extends({
    ref: rootRef,
    vkuiClass: classNames('AppRoot', {
      'AppRoot--no-mouse': !hasMouse
    })
  }, props), createScopedElement(AppRootContext.Provider, {
    value: {
      appRoot: rootRef,
      portalRoot: portalRoot,
      embedded: embedded
    }
  }, createScopedElement(ScrollContext.Provider, {
    value: scrollController
  }, createScopedElement(IconSettingsProvider, {
    classPrefix: "vkui",
    globalClasses: !noLegacyClasses
  }, children))));
};

export default withAdaptivity(AppRoot, {
  sizeX: true,
  hasMouse: true
});
//# sourceMappingURL=AppRoot.js.map