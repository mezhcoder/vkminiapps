import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createScopedElement } from "../../lib/jsxRuntime";
import React, { Children } from 'react';
import { classNames } from "../../lib/classNames";
import { getClassName } from "../../helpers/getClassName";
import { usePlatform } from "../../hooks/usePlatform";
import Caption from "../Typography/Caption/Caption";
import Text from "../Typography/Text/Text";
import { VKCOM } from "../../lib/platform";
import { hasReactNode } from "../../lib/utils";

var CounterTypography = function CounterTypography(_ref) {
  var size = _ref.size,
      children = _ref.children,
      restProps = _objectWithoutProperties(_ref, ["size", "children"]);

  var platform = usePlatform();

  if (size === 's') {
    var weight = platform === VKCOM ? 'medium' : 'regular';
    return createScopedElement(Caption, _extends({
      level: "2",
      weight: weight
    }, restProps), children);
  }

  return createScopedElement(Text, _extends({
    weight: "medium"
  }, restProps), children);
};

var Counter = function Counter(props) {
  var mode = props.mode,
      size = props.size,
      children = props.children,
      restProps = _objectWithoutProperties(props, ["mode", "size", "children"]);

  var platform = usePlatform();

  if (Children.count(children) === 0) {
    return null;
  }

  return createScopedElement("div", _extends({}, restProps, {
    vkuiClass: classNames(getClassName('Counter', platform), "Counter--".concat(mode), "Counter--s-".concat(size))
  }), hasReactNode(children) && createScopedElement(CounterTypography, {
    size: size,
    vkuiClass: "Counter__in"
  }, children));
};

Counter.defaultProps = {
  mode: 'secondary',
  size: 'm'
};
export default /*#__PURE__*/React.memo(Counter);
//# sourceMappingURL=Counter.js.map