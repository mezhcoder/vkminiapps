{"version":3,"sources":["../../../src/components/Tooltip/Tooltip.tsx"],"names":["React","Component","Fragment","isValidElement","classNames","getClassName","ReactDOM","canUseDOM","withDOM","setRef","Subhead","tooltipContainerAttr","isDOMTypeElement","element","type","baseClassName","TooltipPortal","props","target","targetBounds","getBoundingClientRect","portalBounds","portalTarget","width","height","x","left","y","top","el","state","fixedPortal","closest","document","removeEventListener","onClose","offsetY","offsetX","alignX","alignY","coords","getBoundingTargetRect","addEventListener","setState","offsetWidth","offsetHeight","header","text","cornerOffset","mode","createPortal","getRef","Tooltip","ready","targetEl","children","ref","getRootRef","isShown","portalProps","child","cloneElement"],"mappings":"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","sourcesContent":["import React, { ReactElement, ReactNode, Component, Fragment, RefCallback, isValidElement } from 'react';\nimport { classNames } from '../../lib/classNames';\nimport { getClassName } from '../../helpers/getClassName';\nimport ReactDOM from 'react-dom';\nimport { canUseDOM, DOMProps, withDOM } from '../../lib/dom';\nimport { setRef } from '../../lib/utils';\nimport Subhead from '../Typography/Subhead/Subhead';\nimport { tooltipContainerAttr } from './TooltipContainer';\n\ninterface TooltipPortalProps extends Partial<TooltipProps> {\n  target?: HTMLElement;\n}\n\ninterface TooltipPortalState {\n  x: number;\n  y: number;\n}\n\ntype GetBoundingTargetRect = () => {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nconst isDOMTypeElement = (element: ReactElement): element is React.DOMElement<any, any> => {\n  return React.isValidElement(element) && typeof element.type === 'string';\n};\n\nconst baseClassName = getClassName('Tooltip');\n\nconst TooltipPortal = withDOM<TooltipPortalProps>(\n  class TooltipPortalClass extends Component<TooltipPortalProps & DOMProps, TooltipPortalState> {\n    constructor(props: TooltipPortalProps) {\n      super(props);\n\n      this.state = {\n        x: 0,\n        y: 0,\n      };\n\n      const { target } = props;\n      /* eslint-disable no-restricted-properties */\n      this.fixedPortal = target.closest(`[${tooltipContainerAttr}=fixed]`) != null;\n      this.portalTarget = target.closest(`[${tooltipContainerAttr}]`);\n      /* eslint-enable no-restricted-properties */\n    }\n\n    get document() {\n      return this.props.document;\n    }\n\n    fixedPortal: boolean;\n\n    el: HTMLDivElement;\n\n    portalTarget: HTMLElement;\n\n    getBoundingTargetRect: GetBoundingTargetRect = () => {\n      const { target } = this.props;\n      const targetBounds = target.getBoundingClientRect();\n      const portalBounds = this.portalTarget.getBoundingClientRect();\n\n      return {\n        width: targetBounds.width,\n        height: targetBounds.height,\n        x: targetBounds.left - portalBounds.left,\n        y: targetBounds.top - portalBounds.top,\n      };\n    };\n\n    componentWillUnmount() {\n      this.document.removeEventListener('click', this.props.onClose);\n    }\n\n    componentDidMount() {\n      const { offsetY, offsetX, alignX, alignY } = this.props;\n      const coords = this.getBoundingTargetRect();\n\n      this.document.addEventListener('click', this.props.onClose);\n\n      this.setState({\n        x: coords.x + offsetX + (alignX === 'right' ? coords.width - this.el.offsetWidth : 0),\n        y: coords.y + (alignY === 'top' ? -this.el.offsetHeight - offsetY : coords.height + offsetY),\n      });\n    }\n\n    getRef: RefCallback<HTMLDivElement> = (el) => this.el = el;\n\n    render() {\n      const { header, text, alignX, alignY, cornerOffset, mode } = this.props;\n\n      return ReactDOM.createPortal(\n        <div vkuiClass={\n          classNames(\n            baseClassName,\n            `Tooltip--x-${alignX}`,\n            `Tooltip--y-${alignY}`,\n            `Tooltip--${mode}`,\n            {\n              'Tooltip--fixed': this.fixedPortal,\n            },\n          )}>\n          <div vkuiClass=\"Tooltip__container\" style={{ top: this.state.y, left: this.state.x }} ref={this.getRef}>\n            <div vkuiClass=\"Tooltip__corner\" style={{ [alignX]: 20 + cornerOffset }} />\n            <div vkuiClass=\"Tooltip__content\">\n              {header && <Subhead weight=\"semibold\" vkuiClass=\"Tooltip__title\">{header}</Subhead>}\n              {text && <Subhead weight=\"regular\" vkuiClass=\"Tooltip__text\">{text}</Subhead>}\n            </div>\n          </div>\n        </div>, this.portalTarget);\n    }\n  },\n);\n\nexport interface TooltipProps {\n  /**\n   * **Важно**: если в `children` передан React-компонент, то необходимо убедиться в том, что он поддерживает\n   * свойство `getRootRef`, которое должно возвращаться ссылку на корневой DOM-элемент компонента,\n   * иначе тултип показан не будет. Если передан React-element, то такой проблемы нет.\n   */\n  children: ReactNode;\n  mode: 'accent' | 'light';\n  /**\n   * Если передан `false`, то рисуется просто `children`.\n   */\n  isShown: boolean;\n  /**\n   * Текст тултипа.\n   */\n  text?: ReactNode;\n  /**\n   * Заголовок тултипа.\n   */\n  header?: ReactNode;\n  /**\n   * Положение по горизонтали (прижатие к левому или правому краю `children`).\n   */\n  alignX?: 'left' | 'right';\n  /**\n   * Положение по вертикали (расположение над или под `children`).\n   */\n  alignY?: 'top' | 'bottom';\n  /**\n   * Сдвиг по горизонтали (относительно портала, в котором рисуется тултип).\n   */\n  offsetX?: number;\n  /**\n   * Сдвиг по вертикали (относительно портала, в котором рисуется тултип).\n   */\n  offsetY?: number;\n  /**\n   * Сдвиг треугольника (относительно ширины тултипа).\n   */\n  cornerOffset?: number;\n  /**\n   * Callback, который вызывается при клике по любому месту в пределах экрана.\n   */\n  onClose(): void;\n}\n\nexport interface TooltipState {\n  ready: boolean;\n}\n\nexport default class Tooltip extends Component<TooltipProps, TooltipState> {\n  static defaultProps: Partial<TooltipProps> = {\n    offsetX: 0,\n    offsetY: 15,\n    alignX: 'left',\n    alignY: 'bottom',\n    cornerOffset: 0,\n    isShown: true,\n    mode: 'accent',\n  };\n\n  state: TooltipState = {\n    ready: false,\n  };\n\n  targetEl: HTMLElement;\n\n  componentDidMount() {\n    if (canUseDOM) {\n      this.targetEl && this.setState({ ready: true });\n    }\n  }\n\n  getRef: RefCallback<HTMLDivElement> = (el) => {\n    this.targetEl = el;\n\n    const { children } = this.props;\n    if (isValidElement(children)) {\n      setRef(el, isDOMTypeElement(children) ? children.ref : children.props.getRootRef);\n    }\n  };\n\n  render() {\n    const { children = null, isShown, ...portalProps } = this.props;\n\n    const child = isValidElement(children) ? React.cloneElement(children, {\n      [isDOMTypeElement(children) ? 'ref' : 'getRootRef']: this.getRef,\n    }) : children;\n\n    if (!isShown || !this.state.ready) {\n      return child;\n    }\n\n    return (\n      <Fragment>\n        {child}\n        <TooltipPortal {...portalProps} target={this.targetEl} />\n      </Fragment>\n    );\n  }\n}\n"],"file":"Tooltip.js"}