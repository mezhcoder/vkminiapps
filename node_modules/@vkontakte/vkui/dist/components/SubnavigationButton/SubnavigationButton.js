import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createScopedElement } from "../../lib/jsxRuntime";
import { classNames } from "../../lib/classNames";
import { getClassName } from "../../helpers/getClassName";
import { hasReactNode } from "../../lib/utils";
import Tappable from "../Tappable/Tappable";
import { Icon16Dropdown } from '@vkontakte/icons';
import { usePlatform } from "../../hooks/usePlatform";
import Caption from "../Typography/Caption/Caption";
import Subhead from "../Typography/Subhead/Subhead";

function renderLabel(children, textLevel) {
  var className = 'SubnavigationButton__label';

  switch (textLevel) {
    case 1:
      return createScopedElement(Subhead, {
        Component: "div",
        weight: "regular",
        vkuiClass: className
      }, children);

    case 2:
      return createScopedElement(Caption, {
        level: "1",
        Component: "div",
        weight: "regular",
        vkuiClass: className
      }, children);

    case 3:
      return createScopedElement(Caption, {
        level: "2",
        Component: "div",
        weight: "regular",
        vkuiClass: className
      }, children);
  }
}

export var SubnavigationButton = function SubnavigationButton(props) {
  var platform = usePlatform();

  var size = props.size,
      selected = props.selected,
      textLevel = props.textLevel,
      before = props.before,
      after = props.after,
      expandable = props.expandable,
      children = props.children,
      restProps = _objectWithoutProperties(props, ["size", "selected", "textLevel", "before", "after", "expandable", "children"]);

  return createScopedElement(Tappable, _extends({}, restProps, {
    hasActive: false,
    vkuiClass: classNames(getClassName('SubnavigationButton', platform), "SubnavigationButton--".concat(size), {
      'SubnavigationButton--selected': selected
    })
  }), createScopedElement("div", {
    vkuiClass: "SubnavigationButton__in"
  }, hasReactNode(before) && createScopedElement("div", {
    vkuiClass: "SubnavigationButton__before"
  }, before), renderLabel(children, textLevel), hasReactNode(after) && createScopedElement("div", {
    vkuiClass: "SubnavigationButton__after"
  }, after), expandable && createScopedElement(Icon16Dropdown, {
    vkuiClass: "SubnavigationButton__expandableIcon"
  })));
};
SubnavigationButton.defaultProps = {
  size: 'm',
  textLevel: 1
};
//# sourceMappingURL=SubnavigationButton.js.map