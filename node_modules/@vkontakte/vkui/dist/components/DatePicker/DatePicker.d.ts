import { Component, ChangeEventHandler, HTMLAttributes } from 'react';
import { AdaptivityProps } from '../../hoc/withAdaptivity';
import { HasPlatform } from '../../types';
import { CustomSelectOptionInterface } from '../CustomSelect/CustomSelect';
export declare type DatePickerDateFormat = {
    day: number;
    month: number;
    year: number;
};
declare type DatePickerState = Partial<DatePickerDateFormat>;
export interface DatePickerProps extends Omit<HTMLAttributes<HTMLDivElement>, 'defaultValue' | 'min' | 'max'>, HasPlatform, AdaptivityProps {
    min: DatePickerDateFormat;
    max: DatePickerDateFormat;
    name?: string;
    defaultValue?: DatePickerDateFormat;
    popupDirection?: 'top' | 'bottom';
    monthNames?: string[];
    dayPlaceholder?: string;
    monthPlaceholder?: string;
    yearPlaceholder?: string;
    onDateChange?: (value: DatePickerDateFormat) => void;
}
declare type GetOptions = () => CustomSelectOptionInterface[];
declare class DatePicker extends Component<DatePickerProps, DatePickerState> {
    constructor(props: DatePickerProps);
    static defaultProps: {
        min: {
            day: number;
            month: number;
            year: number;
        };
        max: {
            day: number;
            month: number;
            year: number;
        };
    };
    private convertToInputFormat;
    parseInputDate: (date: string) => {
        day: number;
        month: number;
        year: number;
    };
    getDaysInMonth: (year: number, month: number) => number;
    getMonthMaxDay: () => number;
    getDayOptions: GetOptions;
    getMonthOptions: GetOptions;
    getYearOptions: GetOptions;
    onSelectChange: ChangeEventHandler<HTMLSelectElement>;
    onStringChange: ChangeEventHandler<HTMLInputElement>;
    customView(): JSX.Element;
    nativeView(): JSX.Element;
    render(): JSX.Element;
}
declare const _default: typeof DatePicker;
export default _default;
