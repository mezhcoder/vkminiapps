import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { createScopedElement } from "../../lib/jsxRuntime";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { Component } from 'react';
import Input from "../Input/Input";
import { withAdaptivity } from "../../hoc/withAdaptivity";
import { leadingZero } from "../../lib/utils";
import CustomSelect from "../CustomSelect/CustomSelect";
var DefaultMonths = ['Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря'];

var DatePicker = /*#__PURE__*/function (_Component) {
  _inherits(DatePicker, _Component);

  var _super = _createSuper(DatePicker);

  function DatePicker(props) {
    var _this;

    _classCallCheck(this, DatePicker);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "parseInputDate", function (date) {
      var splited = date.split('-');
      return {
        day: Number(splited[2]),
        month: Number(splited[1]),
        year: Number(splited[0])
      };
    });

    _defineProperty(_assertThisInitialized(_this), "getDaysInMonth", function (year, month) {
      return new Date(year, month, 0).getDate();
    });

    _defineProperty(_assertThisInitialized(_this), "getMonthMaxDay", function () {
      var _this$state = _this.state,
          month = _this$state.month,
          year = _this$state.year;

      if (!month) {
        return 31;
      }

      if (!year) {
        return _this.getDaysInMonth(2016, month);
      }

      return _this.getDaysInMonth(year, month);
    });

    _defineProperty(_assertThisInitialized(_this), "getDayOptions", function () {
      var maxMonthDay = _this.getMonthMaxDay();

      var array = new Array(maxMonthDay);

      for (var i = 0; i < maxMonthDay; i++) {
        var _value = i + 1;

        array[i] = {
          label: String(_value),
          value: _value
        };
      }

      return array;
    });

    _defineProperty(_assertThisInitialized(_this), "getMonthOptions", function () {
      var monthNames = _this.props.monthNames;
      return (monthNames || DefaultMonths).map(function (name, index) {
        var value = index + 1;
        return {
          label: name,
          value: value
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getYearOptions", function () {
      var _this$props = _this.props,
          max = _this$props.max,
          min = _this$props.min;
      var yearOptions = [];
      var maxYear = max.year;
      var minYear = min.year;

      for (var _value2 = maxYear; _value2 >= minYear; _value2--) {
        yearOptions.push({
          label: String(_value2),
          value: _value2
        });
      }

      return yearOptions;
    });

    _defineProperty(_assertThisInitialized(_this), "onSelectChange", function (e) {
      var onDateChange = _this.props.onDateChange;

      _this.setState(_defineProperty({}, e.target.name, Number(e.target.value)), function () {
        onDateChange && onDateChange(_this.state);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onStringChange", function (e) {
      var onDateChange = _this.props.onDateChange;

      var date = _this.parseInputDate(e.currentTarget.value);

      _this.setState(function () {
        return _objectSpread({}, date);
      });

      onDateChange && onDateChange(date);
    });

    _this.state = props.defaultValue ? props.defaultValue : {
      day: 0,
      month: 0,
      year: 0
    };
    return _this;
  }

  _createClass(DatePicker, [{
    key: "convertToInputFormat",
    // Переводим state к формату гг-мм-дд
    value: function convertToInputFormat(date) {
      var day = date.day,
          month = date.month,
          year = date.year;
      return "".concat(year, "-").concat(leadingZero(month), "-").concat(leadingZero(day));
    }
  }, {
    key: "customView",
    value: function customView() {
      var _this$props2 = this.props,
          name = _this$props2.name,
          min = _this$props2.min,
          max = _this$props2.max,
          dayPlaceholder = _this$props2.dayPlaceholder,
          monthPlaceholder = _this$props2.monthPlaceholder,
          yearPlaceholder = _this$props2.yearPlaceholder,
          popupDirection = _this$props2.popupDirection,
          defaultValue = _this$props2.defaultValue,
          hasMouse = _this$props2.hasMouse,
          monthNames = _this$props2.monthNames,
          restProps = _objectWithoutProperties(_this$props2, ["name", "min", "max", "dayPlaceholder", "monthPlaceholder", "yearPlaceholder", "popupDirection", "defaultValue", "hasMouse", "monthNames"]);

      var _this$state2 = this.state,
          day = _this$state2.day,
          month = _this$state2.month,
          year = _this$state2.year;
      return createScopedElement("div", _extends({
        vkuiClass: "DatePicker"
      }, restProps), createScopedElement("div", {
        vkuiClass: "DatePicker__container"
      }, createScopedElement("div", {
        vkuiClass: "DatePicker__day"
      }, createScopedElement(CustomSelect, {
        name: "day",
        value: day,
        options: this.getDayOptions(),
        placeholder: dayPlaceholder,
        popupDirection: popupDirection,
        onChange: this.onSelectChange
      })), createScopedElement("div", {
        vkuiClass: "DatePicker__month"
      }, createScopedElement(CustomSelect, {
        name: "month",
        value: month,
        options: this.getMonthOptions(),
        placeholder: monthPlaceholder,
        popupDirection: popupDirection,
        onChange: this.onSelectChange
      })), createScopedElement("div", {
        vkuiClass: "DatePicker__year"
      }, createScopedElement(CustomSelect, {
        name: "year",
        value: year,
        options: this.getYearOptions(),
        placeholder: yearPlaceholder,
        popupDirection: popupDirection,
        onChange: this.onSelectChange
      }))), createScopedElement("input", {
        type: "hidden",
        name: name,
        value: this.convertToInputFormat(this.state)
      }));
    }
  }, {
    key: "nativeView",
    value: function nativeView() {
      var _this$props3 = this.props,
          name = _this$props3.name,
          min = _this$props3.min,
          max = _this$props3.max,
          dayPlaceholder = _this$props3.dayPlaceholder,
          monthPlaceholder = _this$props3.monthPlaceholder,
          yearPlaceholder = _this$props3.yearPlaceholder,
          popupDirection = _this$props3.popupDirection,
          defaultValue = _this$props3.defaultValue,
          hasMouse = _this$props3.hasMouse,
          restProps = _objectWithoutProperties(_this$props3, ["name", "min", "max", "dayPlaceholder", "monthPlaceholder", "yearPlaceholder", "popupDirection", "defaultValue", "hasMouse"]);

      var _this$state3 = this.state,
          day = _this$state3.day,
          month = _this$state3.month,
          year = _this$state3.year;

      if (day && month && year) {
        return createScopedElement(Input, _extends({}, restProps, {
          name: name,
          type: "date",
          defaultValue: this.convertToInputFormat(this.state),
          onChange: this.onStringChange,
          min: this.convertToInputFormat(min),
          max: this.convertToInputFormat(max)
        }));
      }

      return createScopedElement(Input, _extends({}, restProps, {
        name: name,
        type: "date",
        onChange: this.onStringChange,
        min: this.convertToInputFormat(min),
        max: this.convertToInputFormat(max)
      }));
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.hasMouse ? this.customView() : this.nativeView();
    }
  }]);

  return DatePicker;
}(Component);

_defineProperty(DatePicker, "defaultProps", {
  min: {
    day: 0,
    month: 0,
    year: 0
  },
  max: {
    day: 31,
    month: 12,
    year: 2100
  }
});

export default withAdaptivity(DatePicker, {
  hasMouse: true
});
//# sourceMappingURL=DatePicker.js.map