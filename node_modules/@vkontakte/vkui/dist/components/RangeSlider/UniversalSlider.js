import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { createScopedElement } from "../../lib/jsxRuntime";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { Component, createRef } from 'react';
import Touch from "../Touch/Touch";
import { getClassName } from "../../helpers/getClassName";
import { classNames } from "../../lib/classNames";
import { setRef } from "../../lib/utils";
import { rescale } from "../../helpers/math";
import { withAdaptivity } from "../../hoc/withAdaptivity";
import { withPlatform } from "../../hoc/withPlatform";

var UniversalSliderDumb = /*#__PURE__*/function (_Component) {
  _inherits(UniversalSliderDumb, _Component);

  var _super = _createSuper(UniversalSliderDumb);

  function UniversalSliderDumb() {
    var _this;

    _classCallCheck(this, UniversalSliderDumb);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "dragging", false);

    _defineProperty(_assertThisInitialized(_this), "startX", 0);

    _defineProperty(_assertThisInitialized(_this), "containerWidth", 0);

    _defineProperty(_assertThisInitialized(_this), "container", void 0);

    _defineProperty(_assertThisInitialized(_this), "thumbStart", /*#__PURE__*/createRef());

    _defineProperty(_assertThisInitialized(_this), "thumbEnd", /*#__PURE__*/createRef());

    _defineProperty(_assertThisInitialized(_this), "onStart", function (e) {
      if (_this.props.disabled) {
        return;
      }

      var boundingRect = _this.container.getBoundingClientRect();

      _this.containerWidth = boundingRect.width;
      var absolutePosition = e.startX - boundingRect.left;

      var value = _this.offsetToValue(absolutePosition);

      _this.dragging = _this.snapDirection(value, e.originalEvent.target);
      _this.startX = absolutePosition;

      _this.props.onChange(_this.updateRange(value), e);
    });

    _defineProperty(_assertThisInitialized(_this), "onMove", function (e) {
      if (_this.props.disabled) {
        return;
      }

      var value = _this.offsetToValue(_this.startX + (e.shiftX || 0));

      _this.props.onChange(_this.updateRange(value), e);

      e.originalEvent.preventDefault();
    });

    _defineProperty(_assertThisInitialized(_this), "onEnd", function () {
      if (_this.props.disabled) {
        return;
      }

      _this.dragging = false;
    });

    _defineProperty(_assertThisInitialized(_this), "getRef", function (container) {
      _this.container = container;
      setRef(container, _this.props.getRootRef);
    });

    return _this;
  }

  _createClass(UniversalSliderDumb, [{
    key: "updateRange",
    value: function updateRange(value) {
      if (this.props.disabled) {
        return this.props.value;
      }

      var _this$props$value = _slicedToArray(this.props.value, 2),
          start = _this$props$value[0],
          end = _this$props$value[1];

      if (start == null) {
        return [null, value];
      }

      var dragging = this.dragging;

      if (dragging === 'start') {
        if (value > end) {
          // "перехватиться", если перетянули за конец
          this.dragging = 'end';
          return [end, value];
        }

        return [value, end];
      }

      if (dragging === 'end') {
        if (value < start) {
          // "перехватиться", если перетянули за начало
          this.dragging = 'start';
          return [value, start];
        }

        return [start, value];
      }

      return this.props.value;
    }
  }, {
    key: "offsetToValue",
    value: function offsetToValue(absolute) {
      var _this$props = this.props,
          min = _this$props.min,
          max = _this$props.max,
          step = _this$props.step;
      return rescale(absolute, [0, this.containerWidth], [min, max], {
        step: step
      });
    }
  }, {
    key: "snapDirection",
    value: function snapDirection(value, target) {
      if (target === this.thumbStart.current) {
        return 'start';
      }

      if (target === this.thumbEnd.current) {
        return 'end';
      }

      var _this$props$value2 = _slicedToArray(this.props.value, 2),
          start = _this$props$value2[0],
          end = _this$props$value2[1];

      return Math.abs(start - value) <= Math.abs(end - value) ? 'start' : 'end';
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          min = _this$props2.min,
          max = _this$props2.max,
          step = _this$props2.step,
          value = _this$props2.value,
          defaultValue = _this$props2.defaultValue,
          onChange = _this$props2.onChange,
          getRootRef = _this$props2.getRootRef,
          platform = _this$props2.platform,
          sizeY = _this$props2.sizeY,
          disabled = _this$props2.disabled,
          restProps = _objectWithoutProperties(_this$props2, ["min", "max", "step", "value", "defaultValue", "onChange", "getRootRef", "platform", "sizeY", "disabled"]);

      var toPercent = function toPercent(v) {
        return (v - min) / (max - min) * 100;
      };

      var isRange = value[0] != null;
      var draggerStyle = isRange ? {
        width: "".concat(toPercent(value[1]) - toPercent(value[0]), "%"),
        left: isRange ? "".concat(toPercent(value[0]), "%") : null
      } : {
        width: "".concat(toPercent(value[1]), "%")
      };
      return createScopedElement(Touch, _extends({
        "data-value": isRange ? value.join(',') : value
      }, restProps, {
        onStart: this.onStart,
        onMove: this.onMove,
        onEnd: this.onEnd,
        vkuiClass: classNames(getClassName('Slider', platform), "Slider--sizeY-".concat(sizeY), disabled && 'Slider--disabled')
      }), createScopedElement("div", {
        ref: this.getRef,
        vkuiClass: "Slider__in"
      }, createScopedElement("div", {
        vkuiClass: "Slider__dragger",
        style: draggerStyle
      }, isRange && createScopedElement("span", {
        vkuiClass: classNames('Slider__thumb', 'Slider__thumb--start'),
        ref: this.thumbStart
      }), createScopedElement("span", {
        vkuiClass: classNames('Slider__thumb', 'Slider__thumb--end'),
        ref: this.thumbEnd
      }))));
    }
  }]);

  return UniversalSliderDumb;
}(Component);

export var UniversalSlider = withAdaptivity(withPlatform(UniversalSliderDumb), {
  sizeY: true
});
//# sourceMappingURL=UniversalSlider.js.map