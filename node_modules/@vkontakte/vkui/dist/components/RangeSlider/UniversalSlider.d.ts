/// <reference path="../../../types/global.d.ts" />
import { Component, HTMLAttributes, RefCallback } from 'react';
import { TouchEvent, TouchEventHandler } from '../Touch/Touch';
import { HasPlatform, HasRootRef } from '../../types';
import { AdaptivityProps } from '../../hoc/withAdaptivity';
export declare type UniversalValue = [number | null, number];
export interface UniversalSliderProps<Value> extends HasRootRef<HTMLDivElement>, HasPlatform, Omit<HTMLAttributes<HTMLDivElement>, 'value' | 'defaultValue' | 'onChange'>, AdaptivityProps {
    min?: number;
    max?: number;
    step?: number;
    value?: Value;
    defaultValue?: Value;
    disabled?: boolean;
    onChange?(value: Value, e: TouchEvent): void;
}
declare class UniversalSliderDumb extends Component<UniversalSliderProps<UniversalValue>> {
    dragging: false | 'start' | 'end';
    startX: number;
    containerWidth: number;
    container: HTMLDivElement;
    thumbStart: import("react").RefObject<HTMLDivElement>;
    thumbEnd: import("react").RefObject<HTMLDivElement>;
    onStart: TouchEventHandler;
    onMove: TouchEventHandler;
    onEnd: TouchEventHandler;
    updateRange(value: number): UniversalValue;
    offsetToValue(absolute: number): number;
    snapDirection(value: number, target: EventTarget): "end" | "start";
    getRef: RefCallback<HTMLDivElement>;
    render(): JSX.Element;
}
export declare const UniversalSlider: typeof UniversalSliderDumb;
export {};
