import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { createScopedElement } from "../../lib/jsxRuntime";
import { useRef } from 'react';
import { canUseDOM, useDOM } from "../../lib/dom";
import { ConfigProviderContext, Scheme, defaultConfigProviderProps } from "./ConfigProviderContext";
import { VKCOM } from "../../lib/platform";
import { useIsomorphicLayoutEffect } from "../../lib/useIsomorphicLayoutEffect";
import { useObjectMemo } from "../../hooks/useObjectMemo";
import { noop } from "../../lib/utils";

function mapOldScheme(scheme) {
  switch (scheme) {
    case Scheme.DEPRECATED_CLIENT_LIGHT:
      return Scheme.BRIGHT_LIGHT;

    case Scheme.DEPRECATED_CLIENT_DARK:
      return Scheme.SPACE_GRAY;

    default:
      return scheme;
  }
}

var ConfigProvider = function ConfigProvider(_ref) {
  var children = _ref.children,
      config = _objectWithoutProperties(_ref, ["children"]);

  var scheme = config.platform === VKCOM ? Scheme.VKCOM : mapOldScheme(config.scheme);

  var _useDOM = useDOM(),
      document = _useDOM.document;

  var setScheme = function setScheme() {
    if (scheme !== 'inherit') {
      document.body.setAttribute('scheme', scheme);
    }
  };

  var isMounted = useRef(false);

  if (!isMounted.current && canUseDOM) {
    setScheme();
    isMounted.current = true;
  }

  useIsomorphicLayoutEffect(function () {
    setScheme();
    return scheme === 'inherit' ? noop : function () {
      return document.body.removeAttribute('scheme');
    };
  }, [scheme]);
  var configContext = useObjectMemo(config);
  return createScopedElement(ConfigProviderContext.Provider, {
    value: configContext
  }, children);
}; // Деструктуризация нужна из бага в react-docgen-typescript
// https://github.com/styleguidist/react-docgen-typescript/issues/195


ConfigProvider.defaultProps = _objectSpread({}, defaultConfigProviderProps);
export default ConfigProvider;
//# sourceMappingURL=ConfigProvider.js.map