import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createScopedElement } from "../../lib/jsxRuntime";
import { useContext } from 'react';
import PanelHeaderButton from "../PanelHeaderButton/PanelHeaderButton";
import { getClassName } from "../../helpers/getClassName";
import { classNames } from "../../lib/classNames";
import { Icon24Dismiss } from '@vkontakte/icons';
import { IOS } from "../../lib/platform";
import { hasReactNode } from "../../lib/utils";
import { withPlatform } from "../../hoc/withPlatform";
import { withAdaptivity, ViewHeight, ViewWidth } from "../../hoc/withAdaptivity";
import Subhead from "../Typography/Subhead/Subhead";
import Title from "../Typography/Title/Title";
import ModalDismissButton from "../ModalDismissButton/ModalDismissButton";
import ModalRootContext, { useModalRegistry } from "../ModalRoot/ModalRootContext";
import { ModalType } from "../ModalRoot/types";
import { getNavId } from "../../lib/getNavId";

var ModalCard = function ModalCard(props) {
  var icon = props.icon,
      header = props.header,
      subheader = props.subheader,
      children = props.children,
      actions = props.actions,
      actionsLayout = props.actionsLayout,
      onClose = props.onClose,
      platform = props.platform,
      viewWidth = props.viewWidth,
      viewHeight = props.viewHeight,
      hasMouse = props.hasMouse,
      nav = props.nav,
      restProps = _objectWithoutProperties(props, ["icon", "header", "subheader", "children", "actions", "actionsLayout", "onClose", "platform", "viewWidth", "viewHeight", "hasMouse", "nav"]);

  var isDesktop = viewWidth >= ViewWidth.SMALL_TABLET && (hasMouse || viewHeight >= ViewHeight.MEDIUM);
  var canShowCloseBtn = viewWidth >= ViewWidth.SMALL_TABLET;
  var canShowCloseBtnIos = platform === IOS && !canShowCloseBtn;
  var modalContext = useContext(ModalRootContext);

  var _useModalRegistry = useModalRegistry(getNavId(props), ModalType.CARD),
      refs = _useModalRegistry.refs;

  return createScopedElement("div", _extends({}, restProps, {
    vkuiClass: classNames(getClassName('ModalCard', platform), {
      'ModalCard--desktop': isDesktop
    })
  }), createScopedElement("div", {
    vkuiClass: "ModalCard__in",
    ref: refs.innerElement
  }, createScopedElement("div", {
    vkuiClass: "ModalCard__container"
  }, hasReactNode(icon) && createScopedElement("div", {
    vkuiClass: "ModalCard__icon"
  }, icon), hasReactNode(header) && createScopedElement(Title, {
    level: "2",
    weight: "semibold",
    vkuiClass: "ModalCard__header"
  }, header), hasReactNode(subheader) && createScopedElement(Subhead, {
    weight: "regular",
    vkuiClass: "ModalCard__subheader"
  }, subheader), children, hasReactNode(actions) && createScopedElement("div", {
    vkuiClass: classNames('ModalCard__actions', {
      'ModalCard__actions--v': actionsLayout === 'vertical'
    })
  }, actions), canShowCloseBtn && createScopedElement(ModalDismissButton, {
    onClick: onClose || modalContext.onClose
  }), canShowCloseBtnIos && createScopedElement(PanelHeaderButton, {
    vkuiClass: "ModalCard__dismiss",
    onClick: onClose || modalContext.onClose
  }, createScopedElement(Icon24Dismiss, null)))));
};

ModalCard.defaultProps = {
  actionsLayout: 'horizontal'
};
export default withAdaptivity(withPlatform(ModalCard), {
  viewWidth: true,
  viewHeight: true,
  hasMouse: true
});
//# sourceMappingURL=ModalCard.js.map