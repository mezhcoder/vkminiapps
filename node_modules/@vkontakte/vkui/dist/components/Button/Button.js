import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createScopedElement } from "../../lib/jsxRuntime";
import { getClassName } from "../../helpers/getClassName";
import { classNames } from "../../lib/classNames";
import Tappable from "../Tappable/Tappable";
import Title from "../Typography/Title/Title";
import Text from "../Typography/Text/Text";
import Subhead from "../Typography/Subhead/Subhead";
import Caption from "../Typography/Caption/Caption";
import { usePlatform } from "../../hooks/usePlatform";
import { SizeType, withAdaptivity } from "../../hoc/withAdaptivity";
import { Platform, VKCOM } from "../../lib/platform";

var getContent = function getContent(size, children, sizeY, platform) {
  switch (size) {
    case 'l':
      return sizeY === SizeType.COMPACT ? createScopedElement(Text, {
        weight: "medium",
        vkuiClass: "Button__content"
      }, children) : createScopedElement(Title, {
        level: "3",
        weight: "medium",
        Component: "div",
        vkuiClass: "Button__content"
      }, children);

    case 'm':
      return sizeY === SizeType.COMPACT ? createScopedElement(Subhead, {
        weight: platform === VKCOM ? 'regular' : 'medium',
        vkuiClass: "Button__content",
        Component: "div"
      }, children) : createScopedElement(Text, {
        weight: "medium",
        vkuiClass: "Button__content"
      }, children);

    case 's':
    default:
      if (platform === Platform.IOS) {
        return createScopedElement(Subhead, {
          weight: "medium",
          vkuiClass: "Button__content"
        }, children);
      } else if (platform === Platform.VKCOM) {
        return createScopedElement(Caption, {
          level: "1",
          weight: "regular",
          vkuiClass: "Button__content"
        }, children);
      } else {
        return sizeY === SizeType.COMPACT ? createScopedElement(Caption, {
          level: "1",
          weight: "medium",
          vkuiClass: "Button__content"
        }, children) : createScopedElement(Subhead, {
          weight: "medium",
          vkuiClass: "Button__content"
        }, children);
      }

  }
};

var Button = function Button(props) {
  var _classNames;

  var platform = usePlatform();

  var size = props.size,
      mode = props.mode,
      stretched = props.stretched,
      align = props.align,
      children = props.children,
      before = props.before,
      after = props.after,
      getRootRef = props.getRootRef,
      Component = props.Component,
      sizeY = props.sizeY,
      restProps = _objectWithoutProperties(props, ["size", "mode", "stretched", "align", "children", "before", "after", "getRootRef", "Component", "sizeY"]);

  var hasIcons = Boolean(before || after);
  return createScopedElement(Tappable, _extends({}, restProps, {
    vkuiClass: classNames(getClassName('Button', platform), "Button--sz-".concat(size), "Button--lvl-".concat(mode), "Button--aln-".concat(align), "Button--sizeY-".concat(sizeY), (_classNames = {}, _defineProperty(_classNames, 'Button--str', stretched), _defineProperty(_classNames, 'Button--with-icon', hasIcons), _classNames)),
    getRootRef: getRootRef,
    Component: restProps.href ? 'a' : Component,
    activeMode: "opacity"
  }), createScopedElement("div", {
    vkuiClass: "Button__in"
  }, before && createScopedElement("div", {
    vkuiClass: "Button__before"
  }, before), children && getContent(size, children, sizeY, platform), after && createScopedElement("div", {
    vkuiClass: "Button__after"
  }, after)));
};

Button.defaultProps = {
  mode: 'primary',
  Component: 'button',
  align: 'center',
  size: 's',
  stretched: false,
  stopPropagation: true
};
export default withAdaptivity(Button, {
  sizeY: true
});
//# sourceMappingURL=Button.js.map