"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _jsxRuntime = require("../../lib/jsxRuntime");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _getClassName = require("../../helpers/getClassName");

var _classNames = require("../../lib/classNames");

var _View = require("../View/View");

var _withContext = require("../../hoc/withContext");

var _withPlatform = require("../../hoc/withPlatform");

var _withPanelContext = require("../Panel/withPanelContext");

var _utils = require("../../lib/utils");

var _SplitCol = require("../SplitCol/SplitCol");

var _TooltipContainer = require("../Tooltip/TooltipContainer");

var _dom = require("../../lib/dom");

var _platform = require("../../lib/platform");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var FixedLayout = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(FixedLayout, _React$Component);

  var _super = _createSuper(FixedLayout);

  function FixedLayout() {
    var _this;

    (0, _classCallCheck2.default)(this, FixedLayout);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      position: 'absolute',
      top: null,
      bottom: null,
      width: ''
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "el", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMountResizeTimeout", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onViewTransitionStart", function (e) {
      var panelScroll = e.detail.scrolls[_this.props.panel] || 0; // support for unstable ViewInfinite

      if (Array.isArray(panelScroll)) {
        var scrolls = panelScroll; // ViewInfinite может открвыать одну и ту же панель несколько раз,
        // поэтому учитываем скролл панели только если это это панель с которой уходим, либо переход назад

        panelScroll = e.detail.isBack || _this.props.panel === e.detail.from ? scrolls[scrolls.length - 1] || 0 : 0;
      }

      var fromPanelHasScroll = _this.props.panel === e.detail.from && panelScroll > 0;
      var toPanelHasScroll = _this.props.panel === e.detail.to && panelScroll > 0; // если переход назад на Android - анимация только у панели с которой уходим (detail.from), и подстраиваться под скролл надо только на ней
      // на iOS переход между панелями горизонтальный, поэтому там нужно подстраивать хедеры на обеих панелях

      var panelAnimated = _this.props.platform === _platform.IOS || !(_this.props.panel === e.detail.to && e.detail.isBack); // Для панелей, с которых уходим всегда выставляется скролл
      // Для панелей на которые приходим надо смотреть, есть ли браузерный скролл и применяется ли к ней анимация перехода:

      if (fromPanelHasScroll || toPanelHasScroll && _this.canTargetPanelScroll && panelAnimated) {
        _this.setState({
          position: 'absolute',
          top: _this.props.vertical === 'top' || fromPanelHasScroll ? _this.el.offsetTop + panelScroll : null,
          bottom: _this.props.vertical === 'bottom' && !fromPanelHasScroll ? -panelScroll : null,
          width: ''
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onViewTransitionEnd", function () {
      _this.setState({
        position: null,
        top: null,
        bottom: null
      });

      _this.doResize();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "doResize", function () {
      var colRef = _this.props.splitCol.colRef;

      if (colRef && colRef.current) {
        var node = colRef.current;
        var width = node.offsetWidth;

        _this.setState({
          width: "".concat(width, "px"),
          position: null
        });
      } else {
        _this.setState({
          width: '',
          position: null
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRef", function (element) {
      _this.el = element;
      (0, _utils.setRef)(element, _this.props.getRootRef);
    });
    return _this;
  }

  (0, _createClass2.default)(FixedLayout, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.onMountResizeTimeout = setTimeout(function () {
        return _this2.doResize();
      });
      this.window.addEventListener('resize', this.doResize);
      this.document.addEventListener(_View.transitionStartEventName, this.onViewTransitionStart);
      this.document.addEventListener(_View.transitionEndEventName, this.onViewTransitionEnd);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearInterval(this.onMountResizeTimeout);
      this.window.removeEventListener('resize', this.doResize);
      this.document.removeEventListener(_View.transitionStartEventName, this.onViewTransitionStart);
      this.document.removeEventListener(_View.transitionEndEventName, this.onViewTransitionEnd);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          style = _this$props.style,
          vertical = _this$props.vertical,
          getRootRef = _this$props.getRootRef,
          getRef = _this$props.getRef,
          platform = _this$props.platform,
          filled = _this$props.filled,
          splitCol = _this$props.splitCol,
          panel = _this$props.panel,
          getPanelNode = _this$props.getPanelNode,
          window = _this$props.window,
          document = _this$props.document,
          restProps = (0, _objectWithoutProperties2.default)(_this$props, ["children", "style", "vertical", "getRootRef", "getRef", "platform", "filled", "splitCol", "panel", "getPanelNode", "window", "document"]);
      return (0, _jsxRuntime.createScopedElement)(_TooltipContainer.TooltipContainer, (0, _extends2.default)({}, restProps, {
        fixed: true,
        ref: this.getRef,
        vkuiClass: (0, _classNames.classNames)((0, _getClassName.getClassName)('FixedLayout', platform), {
          'FixedLayout--filled': filled
        }, "FixedLayout--".concat(vertical)),
        style: _objectSpread(_objectSpread({}, style), this.state)
      }), (0, _jsxRuntime.createScopedElement)("div", {
        vkuiClass: "FixedLayout__in",
        ref: getRef
      }, children));
    }
  }, {
    key: "document",
    get: function get() {
      return this.props.document;
    }
  }, {
    key: "window",
    get: function get() {
      return this.props.window;
    }
  }, {
    key: "currentPanel",
    get: function get() {
      var elem = this.props.getPanelNode();

      if (!elem) {
        console.warn('[VKUI/FixedLayout] Panel element not found');
      }

      return elem;
    }
  }, {
    key: "canTargetPanelScroll",
    get: function get() {
      var panelEl = this.currentPanel;

      if (!panelEl) {
        return true; // Всегда предпологаем, что может быть скролл в случае, если нет document
      }

      return panelEl.scrollHeight > panelEl.clientHeight;
    }
  }]);
  return FixedLayout;
}(_react.default.Component);

var _default = (0, _withContext.withContext)((0, _withPlatform.withPlatform)((0, _withPanelContext.withPanelContext)((0, _dom.withDOM)(FixedLayout))), _SplitCol.SplitColContext, 'splitCol');

exports.default = _default;
//# sourceMappingURL=FixedLayout.js.map