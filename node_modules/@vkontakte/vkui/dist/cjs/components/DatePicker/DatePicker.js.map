{"version":3,"sources":["../../../../src/components/DatePicker/DatePicker.tsx"],"names":["DefaultMonths","DatePicker","props","date","splited","split","day","Number","month","year","Date","getDate","state","getDaysInMonth","maxMonthDay","getMonthMaxDay","array","Array","i","value","label","String","monthNames","map","name","index","max","min","yearOptions","maxYear","minYear","push","e","onDateChange","setState","target","parseInputDate","currentTarget","defaultValue","dayPlaceholder","monthPlaceholder","yearPlaceholder","popupDirection","hasMouse","restProps","getDayOptions","onSelectChange","getMonthOptions","getYearOptions","convertToInputFormat","onStringChange","customView","nativeView","Component"],"mappings":"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","sourcesContent":["import {\n  Component,\n  ChangeEventHandler,\n  HTMLAttributes,\n} from 'react';\nimport Input from '../Input/Input';\nimport { withAdaptivity, AdaptivityProps } from '../../hoc/withAdaptivity';\nimport { HasPlatform } from '../../types';\nimport { leadingZero } from '../../lib/utils';\nimport CustomSelect, { CustomSelectOptionInterface } from '../CustomSelect/CustomSelect';\n\nconst DefaultMonths: string[] = [\n  'Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря',\n];\n\nexport type DatePickerDateFormat = {\n  day: number;\n  month: number;\n  year: number;\n};\n\ntype DatePickerState = Partial<DatePickerDateFormat>;\n\nexport interface DatePickerProps extends Omit<HTMLAttributes<HTMLDivElement>, 'defaultValue' | 'min' | 'max'>, HasPlatform, AdaptivityProps {\n  min: DatePickerDateFormat;\n  max: DatePickerDateFormat;\n  name?: string;\n  defaultValue?: DatePickerDateFormat;\n  popupDirection?: 'top' | 'bottom';\n  monthNames?: string[];\n  dayPlaceholder?: string;\n  monthPlaceholder?: string;\n  yearPlaceholder?: string;\n  onDateChange?: (value: DatePickerDateFormat) => void;\n}\n\ntype GetOptions = () => CustomSelectOptionInterface[];\n\nclass DatePicker extends Component<DatePickerProps, DatePickerState> {\n  constructor(props: DatePickerProps) {\n    super(props);\n\n    this.state = props.defaultValue ? props.defaultValue : {\n      day: 0,\n      month: 0,\n      year: 0,\n    };\n  }\n\n  static defaultProps = {\n    min: { day: 0, month: 0, year: 0 },\n    max: { day: 31, month: 12, year: 2100 },\n  };\n\n  // Переводим state к формату гг-мм-дд\n  private convertToInputFormat(date: DatePickerState) {\n    const { day, month, year } = date;\n\n    return `${year}-${leadingZero(month)}-${leadingZero(day)}`;\n  };\n\n  // Переводим дату формата гг-мм-дд к объекту\n  parseInputDate = (date: string) => {\n    const splited = date.split('-');\n\n    return {\n      day: Number(splited[2]),\n      month: Number(splited[1]),\n      year: Number(splited[0]),\n    };\n  };\n\n  getDaysInMonth = (year: number, month: number) => {\n    return new Date(year, month, 0).getDate();\n  };\n\n  getMonthMaxDay = () => {\n    const { month, year } = this.state;\n\n    if (!month) {\n      return 31;\n    }\n\n    if (!year) {\n      return this.getDaysInMonth(2016, month);\n    }\n\n    return this.getDaysInMonth(year, month);\n  };\n\n  getDayOptions: GetOptions = () => {\n    const maxMonthDay = this.getMonthMaxDay();\n    const array: CustomSelectOptionInterface[] = new Array(maxMonthDay);\n\n    for (let i = 0; i < maxMonthDay; i++) {\n      const value = i + 1;\n\n      array[i] = {\n        label: String(value),\n        value: value,\n      };\n    }\n\n    return array;\n  };\n\n  getMonthOptions: GetOptions = () => {\n    const { monthNames } = this.props;\n\n    return (monthNames || DefaultMonths).map((name, index) => {\n      const value = index + 1;\n\n      return {\n        label: name,\n        value: value,\n      };\n    });\n  };\n\n  getYearOptions: GetOptions = () => {\n    const { max, min } = this.props;\n    const yearOptions: CustomSelectOptionInterface[] = [];\n    const maxYear = max.year;\n    const minYear = min.year;\n\n    for (let value = maxYear; value >= minYear; value--) {\n      yearOptions.push({\n        label: String(value),\n        value: value,\n      });\n    }\n\n    return yearOptions;\n  };\n\n  onSelectChange: ChangeEventHandler<HTMLSelectElement> = (e) => {\n    const { onDateChange } = this.props;\n\n    this.setState({\n      [e.target.name]: Number(e.target.value),\n    }, () => {\n      onDateChange && onDateChange(this.state as DatePickerDateFormat);\n    });\n  };\n\n  onStringChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    const { onDateChange } = this.props;\n    const date = this.parseInputDate(e.currentTarget.value);\n\n    this.setState(() => ({\n      ...date,\n    }));\n\n    onDateChange && onDateChange(date);\n  };\n\n  customView() {\n    const {\n      name, min, max,\n      dayPlaceholder, monthPlaceholder, yearPlaceholder,\n      popupDirection,\n      defaultValue,\n      hasMouse,\n      monthNames,\n      ...restProps\n    } = this.props;\n    const { day, month, year } = this.state;\n\n    return (\n      <div vkuiClass=\"DatePicker\" {...restProps}>\n        <div vkuiClass=\"DatePicker__container\">\n          <div vkuiClass=\"DatePicker__day\">\n            <CustomSelect\n              name=\"day\"\n              value={day}\n              options={this.getDayOptions()}\n              placeholder={dayPlaceholder}\n              popupDirection={popupDirection}\n              onChange={this.onSelectChange}\n            />\n          </div>\n          <div vkuiClass=\"DatePicker__month\">\n            <CustomSelect\n              name=\"month\"\n              value={month}\n              options={this.getMonthOptions()}\n              placeholder={monthPlaceholder}\n              popupDirection={popupDirection}\n              onChange={this.onSelectChange}\n            />\n          </div>\n          <div vkuiClass=\"DatePicker__year\">\n            <CustomSelect\n              name=\"year\"\n              value={year}\n              options={this.getYearOptions()}\n              placeholder={yearPlaceholder}\n              popupDirection={popupDirection}\n              onChange={this.onSelectChange}\n            />\n          </div>\n        </div>\n        <input type=\"hidden\" name={name} value={this.convertToInputFormat(this.state as DatePickerState)} />\n      </div>\n    );\n  }\n\n  nativeView() {\n    const {\n      name, min, max,\n      dayPlaceholder, monthPlaceholder, yearPlaceholder,\n      popupDirection,\n      defaultValue,\n      hasMouse,\n      ...restProps\n    } = this.props;\n    const { day, month, year } = this.state;\n\n    if (day && month && year) {\n      return (\n        <Input\n          {...restProps}\n          name={name}\n          type=\"date\"\n          defaultValue={this.convertToInputFormat(this.state as DatePickerState)}\n          onChange={this.onStringChange}\n          min={this.convertToInputFormat(min)}\n          max={this.convertToInputFormat(max)}\n        />\n      );\n    }\n\n    return (\n      <Input\n        {...restProps}\n        name={name}\n        type=\"date\"\n        onChange={this.onStringChange}\n        min={this.convertToInputFormat(min)}\n        max={this.convertToInputFormat(max)}\n      />\n    );\n  }\n\n  render() {\n    return this.props.hasMouse ? this.customView() : this.nativeView();\n  }\n}\n\nexport default withAdaptivity(DatePicker, {\n  hasMouse: true,\n});\n"],"file":"DatePicker.js"}