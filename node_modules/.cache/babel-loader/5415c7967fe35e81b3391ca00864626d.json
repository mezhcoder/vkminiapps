{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { hasReactNode } from \"../../lib/utils\";\nimport Tappable from \"../Tappable/Tappable\";\nimport { Icon16Dropdown } from '@vkontakte/icons';\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport Caption from \"../Typography/Caption/Caption\";\nimport Subhead from \"../Typography/Subhead/Subhead\";\n\nfunction renderLabel(children, textLevel) {\n  var className = 'SubnavigationButton__label';\n\n  switch (textLevel) {\n    case 1:\n      return createScopedElement(Subhead, {\n        Component: \"div\",\n        weight: \"regular\",\n        vkuiClass: className\n      }, children);\n\n    case 2:\n      return createScopedElement(Caption, {\n        level: \"1\",\n        Component: \"div\",\n        weight: \"regular\",\n        vkuiClass: className\n      }, children);\n\n    case 3:\n      return createScopedElement(Caption, {\n        level: \"2\",\n        Component: \"div\",\n        weight: \"regular\",\n        vkuiClass: className\n      }, children);\n  }\n}\n\nexport var SubnavigationButton = function SubnavigationButton(props) {\n  var platform = usePlatform();\n\n  var size = props.size,\n      selected = props.selected,\n      textLevel = props.textLevel,\n      before = props.before,\n      after = props.after,\n      expandable = props.expandable,\n      children = props.children,\n      restProps = _objectWithoutProperties(props, [\"size\", \"selected\", \"textLevel\", \"before\", \"after\", \"expandable\", \"children\"]);\n\n  return createScopedElement(Tappable, _extends({}, restProps, {\n    hasActive: false,\n    vkuiClass: classNames(getClassName('SubnavigationButton', platform), \"SubnavigationButton--\".concat(size), {\n      'SubnavigationButton--selected': selected\n    })\n  }), createScopedElement(\"div\", {\n    vkuiClass: \"SubnavigationButton__in\"\n  }, hasReactNode(before) && createScopedElement(\"div\", {\n    vkuiClass: \"SubnavigationButton__before\"\n  }, before), renderLabel(children, textLevel), hasReactNode(after) && createScopedElement(\"div\", {\n    vkuiClass: \"SubnavigationButton__after\"\n  }, after), expandable && createScopedElement(Icon16Dropdown, {\n    vkuiClass: \"SubnavigationButton__expandableIcon\"\n  })));\n};\nSubnavigationButton.defaultProps = {\n  size: 'm',\n  textLevel: 1\n};","map":{"version":3,"sources":["../../../src/components/SubnavigationButton/SubnavigationButton.tsx"],"names":["className","SubnavigationButton","platform","usePlatform","size","selected","textLevel","before","after","expandable","children","restProps","props","classNames","getClassName","hasReactNode","renderLabel"],"mappings":"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","sourcesContent":["import { FC, ReactNode } from 'react';\nimport { classNames } from '../../lib/classNames';\nimport { getClassName } from '../../helpers/getClassName';\nimport { hasReactNode } from '../../lib/utils';\nimport Tappable, { TappableProps } from '../Tappable/Tappable';\nimport { Icon16Dropdown } from '@vkontakte/icons';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport Caption from '../Typography/Caption/Caption';\nimport Subhead from '../Typography/Subhead/Subhead';\n\nexport interface SubnavigationButtonProps extends Omit<TappableProps, 'size'> {\n  size?: 'm' | 'l';\n  selected?: boolean;\n  /**\n   * Размер шрифта. Этим свойством рекомендуется пользоваться, чтобы отрегулировать размер шрифта у кнопок в `<SubnavigationBar mode=\"fixed\" />`\n   */\n  textLevel?: 1 | 2 | 3;\n  /**\n   * Рекомендуется использовать только иконки с размером 24\n   */\n  before?: ReactNode;\n  /**\n   * Рекомендуется использовать только `<Counter size=\"s\" />` или `<Badge />`\n   */\n  after?: ReactNode;\n  expandable?: boolean;\n}\n\nfunction renderLabel(children: ReactNode, textLevel: SubnavigationButtonProps['textLevel']): ReactNode {\n  const className = 'SubnavigationButton__label';\n\n  switch (textLevel) {\n    case 1:\n      return (\n        <Subhead Component=\"div\" weight=\"regular\" vkuiClass={className}>\n          {children}\n        </Subhead>\n      );\n\n    case 2:\n      return (\n        <Caption level=\"1\" Component=\"div\" weight=\"regular\" vkuiClass={className}>\n          {children}\n        </Caption>\n      );\n\n    case 3:\n      return (\n        <Caption level=\"2\" Component=\"div\" weight=\"regular\" vkuiClass={className}>\n          {children}\n        </Caption>\n      );\n  }\n}\n\nexport const SubnavigationButton: FC<SubnavigationButtonProps> = (props: SubnavigationButtonProps) => {\n  const platform = usePlatform();\n  const {\n    size,\n    selected,\n    textLevel,\n    before,\n    after,\n    expandable,\n    children,\n    ...restProps\n  } = props;\n\n  return (\n    <Tappable\n      {...restProps}\n      hasActive={false}\n      vkuiClass={classNames(\n        getClassName('SubnavigationButton', platform),\n        `SubnavigationButton--${size}`,\n        {\n          'SubnavigationButton--selected': selected,\n        },\n      )}\n    >\n      <div vkuiClass=\"SubnavigationButton__in\">\n        {hasReactNode(before) && <div vkuiClass=\"SubnavigationButton__before\">{before}</div>}\n        {renderLabel(children, textLevel)}\n        {hasReactNode(after) && <div vkuiClass=\"SubnavigationButton__after\">{after}</div>}\n        {expandable && <Icon16Dropdown vkuiClass=\"SubnavigationButton__expandableIcon\" />}\n      </div>\n    </Tappable>\n  );\n};\n\nSubnavigationButton.defaultProps = {\n  size: 'm',\n  textLevel: 1,\n};\n"]},"metadata":{},"sourceType":"module"}