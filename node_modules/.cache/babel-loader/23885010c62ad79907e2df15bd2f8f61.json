{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React, { createRef } from 'react';\nimport SelectMimicry from \"../SelectMimicry/SelectMimicry\";\nimport { debounce, setRef } from \"../../lib/utils\";\nimport { classNames } from \"../../lib/classNames\";\nimport CustomScrollView from \"../CustomScrollView/CustomScrollView\";\nimport { withAdaptivity } from \"../../hoc/withAdaptivity\";\nimport { withPlatform } from \"../../hoc/withPlatform\";\nimport CustomSelectOption from \"../CustomSelectOption/CustomSelectOption\";\nimport { getClassName } from \"../../helpers/getClassName\";\n\nvar CustomSelect = /*#__PURE__*/function (_React$Component) {\n  _inherits(CustomSelect, _React$Component);\n\n  var _super = _createSuper(CustomSelect);\n\n  function CustomSelect(props) {\n    var _this;\n\n    _classCallCheck(this, CustomSelect);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"keyboardInput\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isControlledOutside\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"node\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"selectEl\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollBoxRef\", /*#__PURE__*/createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"resetKeyboardInput\", function () {\n      _this.keyboardInput = '';\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getSelectedItem\", function () {\n      var selectedOptionIndex = _this.state.selectedOptionIndex;\n      var options = _this.props.options;\n\n      if (!options.length) {\n        return null;\n      }\n\n      return options[selectedOptionIndex];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"open\", function () {\n      _this.setState(function (_ref) {\n        var selectedOptionIndex = _ref.selectedOptionIndex;\n        return {\n          opened: true,\n          focusedOptionIndex: selectedOptionIndex\n        };\n      }, function () {\n        var selectedOptionIndex = _this.state.selectedOptionIndex;\n\n        if (_this.isValidIndex(selectedOptionIndex)) {\n          _this.scrollToElement(selectedOptionIndex, true);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"close\", function () {\n      _this.resetKeyboardInput();\n\n      _this.setState(function () {\n        return {\n          opened: false,\n          focusedOptionIndex: -1\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectFocused\", function () {\n      var focusedOptionIndex = _this.state.focusedOptionIndex;\n\n      _this.select(focusedOptionIndex);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"select\", function (index) {\n      var options = _this.props.options;\n\n      if (!_this.isValidIndex(index)) {\n        return;\n      }\n\n      var item = options[index];\n\n      _this.setState({\n        nativeSelectValue: item.value\n      }, function () {\n        var event = new Event('change', {\n          bubbles: true\n        });\n\n        _this.selectEl.dispatchEvent(event);\n      });\n\n      _this.close();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function () {\n      _this.state.opened ? _this.close() : _this.open();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function () {\n      _this.setState(function () {\n        return {\n          focused: true\n        };\n      });\n\n      var event = new Event('focus');\n\n      _this.selectEl.dispatchEvent(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function () {\n      _this.resetKeyboardInput();\n\n      _this.setState(function () {\n        return {\n          opened: false,\n          focused: false\n        };\n      });\n\n      var event = new Event('blur');\n\n      _this.selectEl.dispatchEvent(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDocumentClick\", function (event) {\n      var thisNode = _this.node;\n\n      if (_this.state.opened && thisNode && !thisNode.contains(event.target)) {\n        _this.onBlur();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"focusOptionByIndex\", function (index) {\n      var focusedOptionIndex = _this.state.focusedOptionIndex;\n      var options = _this.props.options;\n      var oldIndex = focusedOptionIndex;\n\n      if (index < 0) {\n        index = options.length - 1;\n      } else if (index >= options.length) {\n        index = 0;\n      }\n\n      if (index === oldIndex) {\n        return;\n      }\n\n      _this.scrollToElement(index);\n\n      _this.setState(function () {\n        return {\n          focusedOptionIndex: index\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"focusOption\", function (type) {\n      var focusedOptionIndex = _this.state.focusedOptionIndex;\n      var index = focusedOptionIndex;\n\n      if (type === 'next') {\n        index = focusedOptionIndex + 1;\n      } else if (type === 'prev') {\n        index = focusedOptionIndex - 1;\n      }\n\n      _this.focusOptionByIndex(index);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOptionHover\", function (e) {\n      _this.setState({\n        focusedOptionIndex: Array.prototype.indexOf.call(e.currentTarget.parentNode.children, e.currentTarget)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOptionDown\", function (e) {\n      e.preventDefault();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetFocusedOption\", function () {\n      _this.setState(function () {\n        return {\n          focusedOptionIndex: -1\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyboardInput\", function (key) {\n      var options = _this.props.options;\n      var fullInput = _this.keyboardInput + key;\n      var optionIndex = options.findIndex(function (option) {\n        return option.label.toLowerCase().includes(fullInput);\n      });\n\n      if (optionIndex > -1) {\n        _this.focusOptionByIndex(optionIndex);\n      }\n\n      _this.keyboardInput = fullInput;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onNativeSelectChange\", function (e) {\n      var value = e.currentTarget.value;\n\n      if (!_this.isControlledOutside) {\n        _this.setState({\n          selectedOptionIndex: _this.findSelectedIndex(_this.props.options, value)\n        });\n      }\n\n      if (_this.props.onChange) {\n        _this.props.onChange(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDownSelect\", function (event) {\n      var opened = _this.state.opened;\n\n      if (event.key.length === 1 && event.key !== ' ') {\n        _this.onKeyboardInput(event.key);\n\n        return;\n      }\n\n      switch (event.key) {\n        case 'ArrowUp':\n          event.preventDefault();\n          opened ? _this.focusOption('prev') : _this.open();\n          break;\n\n        case 'ArrowDown':\n          event.preventDefault();\n          opened ? _this.focusOption('next') : _this.open();\n          break;\n\n        case 'Escape':\n          event.preventDefault();\n\n          _this.close();\n\n          break;\n\n        case 'Enter':\n        case 'Spacebar':\n        case ' ':\n          event.preventDefault();\n          opened ? _this.selectFocused() : _this.open();\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyUp\", debounce(_this.resetKeyboardInput, 1000));\n\n    _defineProperty(_assertThisInitialized(_this), \"renderOption\", function (option, index) {\n      var _this$state = _this.state,\n          focusedOptionIndex = _this$state.focusedOptionIndex,\n          selectedOptionIndex = _this$state.selectedOptionIndex;\n      var renderOption = _this.props.renderOption;\n      var hovered = index === focusedOptionIndex;\n      var selected = index === selectedOptionIndex;\n      return createScopedElement(React.Fragment, {\n        key: \"\".concat(option.value)\n      }, renderOption({\n        option: option,\n        hovered: hovered,\n        children: option.label,\n        selected: selected,\n        onClick: _this.selectFocused,\n        onMouseDown: _this.handleOptionDown,\n        onMouseEnter: _this.handleOptionHover\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rootRef\", function (element) {\n      _this.node = element;\n      setRef(element, _this.props.getRootRef);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectRef\", function (element) {\n      _this.selectEl = element;\n      setRef(element, _this.props.getRef);\n    });\n\n    var _value = props.value,\n        defaultValue = props.defaultValue;\n    var initialValue = _value !== undefined ? _value : defaultValue;\n    _this.keyboardInput = '';\n    _this.state = {\n      opened: false,\n      focused: false,\n      focusedOptionIndex: -1,\n      selectedOptionIndex: _this.findSelectedIndex(props.options, initialValue),\n      nativeSelectValue: initialValue\n    };\n\n    if (props.value !== undefined) {\n      _this.isControlledOutside = true;\n    }\n\n    return _this;\n  }\n\n  _createClass(CustomSelect, [{\n    key: \"findSelectedIndex\",\n    value: function findSelectedIndex(options, value) {\n      return options.findIndex(function (item) {\n        value = typeof item.value === 'number' ? Number(value) : value;\n        return item.value === value;\n      });\n    }\n  }, {\n    key: \"isValidIndex\",\n    value: function isValidIndex(index) {\n      return index >= 0 && index < this.props.options.length;\n    }\n  }, {\n    key: \"scrollToElement\",\n    value: function scrollToElement(index) {\n      var center = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var dropdown = this.scrollBoxRef.current;\n      var item = dropdown ? dropdown.children[index] : null;\n\n      if (!item) {\n        return;\n      }\n\n      var dropdownHeight = dropdown.offsetHeight;\n      var scrollTop = dropdown.scrollTop;\n      var itemTop = item.offsetTop;\n      var itemHeight = item.offsetHeight;\n\n      if (center) {\n        dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n      } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n        dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n      } else if (itemTop < scrollTop) {\n        dropdown.scrollTop = itemTop;\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('click', this.handleDocumentClick, false);\n      document.addEventListener('touchend', this.handleDocumentClick, false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('click', this.handleDocumentClick, false);\n      document.removeEventListener('touchend', this.handleDocumentClick, false);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.value !== this.props.value || prevProps.options !== this.props.options) {\n        this.isControlledOutside = this.props.value !== undefined;\n        var value = this.props.value === undefined ? this.state.nativeSelectValue : this.props.value;\n        this.setState({\n          nativeSelectValue: value,\n          selectedOptionIndex: this.findSelectedIndex(this.props.options, value)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          opened = _this$state2.opened,\n          nativeSelectValue = _this$state2.nativeSelectValue;\n\n      var _this$props = this.props,\n          name = _this$props.name,\n          className = _this$props.className,\n          getRef = _this$props.getRef,\n          getRootRef = _this$props.getRootRef,\n          popupDirection = _this$props.popupDirection,\n          options = _this$props.options,\n          sizeY = _this$props.sizeY,\n          platform = _this$props.platform,\n          style = _this$props.style,\n          onChange = _this$props.onChange,\n          onBlur = _this$props.onBlur,\n          onFocus = _this$props.onFocus,\n          renderOption = _this$props.renderOption,\n          children = _this$props.children,\n          restProps = _objectWithoutProperties(_this$props, [\"name\", \"className\", \"getRef\", \"getRootRef\", \"popupDirection\", \"options\", \"sizeY\", \"platform\", \"style\", \"onChange\", \"onBlur\", \"onFocus\", \"renderOption\", \"children\"]);\n\n      var selected = this.getSelectedItem();\n      var label = selected ? selected.label : undefined;\n      return createScopedElement(\"label\", {\n        vkuiClass: getClassName('CustomSelect', platform),\n        className: className,\n        style: style,\n        ref: this.rootRef\n      }, createScopedElement(SelectMimicry, _extends({}, restProps, {\n        \"aria-hidden\": true,\n        onClick: this.onClick,\n        onKeyDown: this.handleKeyDownSelect,\n        onKeyUp: this.handleKeyUp,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        vkuiClass: classNames({\n          'CustomSelect__open': opened,\n          'CustomSelect__open--popupDirectionTop': popupDirection === 'top'\n        }),\n        className: className\n      }), label), createScopedElement(\"select\", {\n        ref: this.selectRef,\n        name: name,\n        onChange: this.onNativeSelectChange,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        value: nativeSelectValue,\n        vkuiClass: \"CustomSelect__control\"\n      }, options.map(function (item) {\n        return createScopedElement(\"option\", {\n          key: \"\".concat(item.value),\n          value: item.value\n        });\n      })), opened && createScopedElement(\"div\", {\n        vkuiClass: classNames('CustomSelect__options', \"CustomSelect__options--sizeY-\".concat(sizeY), {\n          'CustomSelect__options--popupDirectionTop': popupDirection === 'top'\n        }),\n        onMouseLeave: this.resetFocusedOption\n      }, createScopedElement(CustomScrollView, {\n        boxRef: this.scrollBoxRef\n      }, options.map(this.renderOption))));\n    }\n  }]);\n\n  return CustomSelect;\n}(React.Component);\n\n_defineProperty(CustomSelect, \"defaultProps\", {\n  renderOption: function renderOption(props) {\n    return createScopedElement(CustomSelectOption, props);\n  },\n  options: []\n});\n\nexport default withPlatform(withAdaptivity(CustomSelect, {\n  sizeY: true\n}));","map":{"version":3,"sources":["../../../src/components/CustomSelect/CustomSelect.tsx"],"names":["CustomSelect","React","Component","renderOption","options","value","defaultValue","props","initialValue","opened","focused","focusedOptionIndex","selectedOptionIndex","nativeSelectValue","createRef","item","Number","index","event","bubbles","thisNode","center","dropdown","dropdownHeight","scrollTop","itemTop","itemHeight","oldIndex","type","Array","e","fullInput","optionIndex","option","debounce","document","prevProps","hovered","selected","children","onClick","onMouseDown","onMouseEnter","handleOptionHover","setRef","name","className","getRef","getRootRef","popupDirection","sizeY","platform","style","onChange","onBlur","onFocus","restProps","label","getClassName","rootRef","classNames","resetFocusedOption","scrollBoxRef","withPlatform","withAdaptivity"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,SAAA,QAAA,OAAA;AAQA,OAAA,aAAA,MAAA,gCAAA;AACA,SAAA,QAAA,EAAA,MAAA,QAAA,iBAAA;AACA,SAAA,UAAA,QAAA,sBAAA;AAEA,OAAA,gBAAA,MAAA,sCAAA;AACA,SAAA,cAAA,QAAA,0BAAA;AACA,SAAA,YAAA,QAAA,wBAAA;AACA,OAAA,kBAAA,MAAA,0CAAA;AACA,SAAA,YAAA,QAAA,4BAAA;;IAmCMA,Y;;;;;AAUJ,WAAA,YAAA,CAAA,KAAA,EAA6C;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA;;AAC3C,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA;;AAD2C,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,qBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,cAAA,EAAA,aA2Bbc,SA3Ba,EAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,oBAAA,EA6BP,YAAM;AAC1C,MAAA,KAAA,CAAA,aAAA,GAAA,EAAA;AA9B2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,iBAAA,EAiCV,YAAM;AAAA,UAC/BF,mBAD+B,GACP,KAAA,CADO,KACP,CADO,mBAAA;AAAA,UAE/BR,OAF+B,GAEnB,KAAA,CAFmB,KAEnB,CAFmB,OAAA;;AAIvC,UAAI,CAACA,OAAO,CAAZ,MAAA,EAAqB;AACnB,eAAA,IAAA;AACD;;AAED,aAAOA,OAAO,CAAd,mBAAc,CAAd;AAzC2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,MAAA,EAmDtC,YAAM;AACX,MAAA,KAAA,CAAA,QAAA,CAAc,UAAA,IAAA,EAAA;AAAA,YAAGQ,mBAAH,GAAA,IAAA,CAAA,mBAAA;AAAA,eAA8B;AAC1CH,UAAAA,MAAM,EADoC,IAAA;AAE1CE,UAAAA,kBAAkB,EAAEC;AAFsB,SAA9B;AAAd,OAAA,EAGI,YAAM;AAAA,YACAA,mBADA,GACwB,KAAA,CADxB,KACwB,CADxB,mBAAA;;AAGR,YAAI,KAAA,CAAA,YAAA,CAAJ,mBAAI,CAAJ,EAA4C;AAC1C,UAAA,KAAA,CAAA,eAAA,CAAA,mBAAA,EAAA,IAAA;AACD;AARH,OAAA;AApD2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,OAAA,EAgErC,YAAM;AACZ,MAAA,KAAA,CAAA,kBAAA;;AAEA,MAAA,KAAA,CAAA,QAAA,CAAc,YAAA;AAAA,eAAO;AACnBH,UAAAA,MAAM,EADa,KAAA;AAEnBE,UAAAA,kBAAkB,EAAE,CAAC;AAFF,SAAP;AAAd,OAAA;AAnE2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EA6E7B,YAAM;AAAA,UACZA,kBADY,GACW,KAAA,CADX,KACW,CADX,kBAAA;;AAGpB,MAAA,KAAA,CAAA,MAAA,CAAA,kBAAA;AAhF2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,QAAA,EAmFpC,UAAA,KAAA,EAAmB;AAAA,UAClBP,OADkB,GACN,KAAA,CADM,KACN,CADM,OAAA;;AAG1B,UAAI,CAAC,KAAA,CAAA,YAAA,CAAL,KAAK,CAAL,EAA+B;AAC7B;AACD;;AAED,UAAMW,IAAI,GAAGX,OAAO,CAApB,KAAoB,CAApB;;AAEA,MAAA,KAAA,CAAA,QAAA,CAAc;AACZS,QAAAA,iBAAiB,EAAEE,IAAI,CAACV;AADZ,OAAd,EAEG,YAAM;AACP,YAAMa,KAAK,GAAG,IAAA,KAAA,CAAA,QAAA,EAAoB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAApB,CAAd;;AACA,QAAA,KAAA,CAAA,QAAA,CAAA,aAAA,CAAA,KAAA;AAJF,OAAA;;AAMA,MAAA,KAAA,CAAA,KAAA;AAlG2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EAqGnC,YAAM;AACd,MAAA,KAAA,CAAA,KAAA,CAAA,MAAA,GAAoB,KAAA,CAApB,KAAoB,EAApB,GAAmC,KAAA,CAAnC,IAAmC,EAAnC;AAtG2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EAyGnC,YAAM;AACd,MAAA,KAAA,CAAA,QAAA,CAAc,YAAA;AAAA,eAAO;AACnBT,UAAAA,OAAO,EAAE;AADU,SAAP;AAAd,OAAA;;AAIA,UAAMQ,KAAK,GAAG,IAAA,KAAA,CAAd,OAAc,CAAd;;AACA,MAAA,KAAA,CAAA,QAAA,CAAA,aAAA,CAAA,KAAA;AA/G2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,QAAA,EAkHpC,YAAM;AACb,MAAA,KAAA,CAAA,kBAAA;;AAEA,MAAA,KAAA,CAAA,QAAA,CAAc,YAAA;AAAA,eAAO;AACnBT,UAAAA,MAAM,EADa,KAAA;AAEnBC,UAAAA,OAAO,EAAE;AAFU,SAAP;AAAd,OAAA;;AAKA,UAAMQ,KAAK,GAAG,IAAA,KAAA,CAAd,MAAc,CAAd;;AACA,MAAA,KAAA,CAAA,QAAA,CAAA,aAAA,CAAA,KAAA;AA3H2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,qBAAA,EA8HvB,UAAA,KAAA,EAAkB;AACtC,UAAME,QAAQ,GAAG,KAAA,CAAjB,IAAA;;AAEA,UAAI,KAAA,CAAA,KAAA,CAAA,MAAA,IAAA,QAAA,IAAiC,CAACA,QAAQ,CAARA,QAAAA,CAAkBF,KAAK,CAA7D,MAAsCE,CAAtC,EAA+E;AAC7E,QAAA,KAAA,CAAA,MAAA;AACD;AAnI0C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,oBAAA,EA4JxB,UAAA,KAAA,EAAmB;AAAA,UAC9BT,kBAD8B,GACP,KAAA,CADO,KACP,CADO,kBAAA;AAAA,UAE9BP,OAF8B,GAElB,KAAA,CAFkB,KAElB,CAFkB,OAAA;AAGtC,UAAMuB,QAAQ,GAAd,kBAAA;;AAEA,UAAIV,KAAK,GAAT,CAAA,EAAe;AACbA,QAAAA,KAAK,GAAGb,OAAO,CAAPA,MAAAA,GAARa,CAAAA;AADF,OAAA,MAEO,IAAIA,KAAK,IAAIb,OAAO,CAApB,MAAA,EAA6B;AAClCa,QAAAA,KAAK,GAALA,CAAAA;AACD;;AAED,UAAIA,KAAK,KAAT,QAAA,EAAwB;AACtB;AACD;;AAED,MAAA,KAAA,CAAA,eAAA,CAAA,KAAA;;AAEA,MAAA,KAAA,CAAA,QAAA,CAAc,YAAA;AAAA,eAAO;AACnBN,UAAAA,kBAAkB,EAAEM;AADD,SAAP;AAAd,OAAA;AA7K2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,aAAA,EAkL/B,UAAA,IAAA,EAA2B;AAAA,UAC/BN,kBAD+B,GACR,KAAA,CADQ,KACR,CADQ,kBAAA;AAEvC,UAAIM,KAAK,GAAT,kBAAA;;AAEA,UAAIW,IAAI,KAAR,MAAA,EAAqB;AACnBX,QAAAA,KAAK,GAAGN,kBAAkB,GAA1BM,CAAAA;AADF,OAAA,MAEO,IAAIW,IAAI,KAAR,MAAA,EAAqB;AAC1BX,QAAAA,KAAK,GAAGN,kBAAkB,GAA1BM,CAAAA;AACD;;AAED,MAAA,KAAA,CAAA,kBAAA,CAAA,KAAA;AA5L2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,mBAAA,EA+LN,UAAA,CAAA,EAAgC;AACrE,MAAA,KAAA,CAAA,QAAA,CAAc;AACZN,QAAAA,kBAAkB,EAAEkB,KAAK,CAALA,SAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAA6BC,CAAC,CAADA,aAAAA,CAAAA,UAAAA,CAA7BD,QAAAA,EAAkEC,CAAC,CAAnED,aAAAA;AADR,OAAd;AAhM2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,kBAAA,EAqMP,UAAA,CAAA,EAAgC;AACpEC,MAAAA,CAAC,CAADA,cAAAA;AAtM2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,oBAAA,EAyMxB,YAAM;AACzB,MAAA,KAAA,CAAA,QAAA,CAAc,YAAA;AAAA,eAAO;AACnBnB,UAAAA,kBAAkB,EAAE,CAAC;AADF,SAAP;AAAd,OAAA;AA1M2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,iBAAA,EA+M3B,UAAA,GAAA,EAAiB;AAAA,UACzBP,OADyB,GACb,KAAA,CADa,KACb,CADa,OAAA;AAEjC,UAAM2B,SAAS,GAAG,KAAA,CAAA,aAAA,GAAlB,GAAA;AAEA,UAAMC,WAAW,GAAG,OAAO,CAAP,SAAA,CAAkB,UAAA,MAAA,EAAY;AAChD,eAAOC,MAAM,CAANA,KAAAA,CAAAA,WAAAA,GAAAA,QAAAA,CAAP,SAAOA,CAAP;AADF,OAAoB,CAApB;;AAIA,UAAID,WAAW,GAAG,CAAlB,CAAA,EAAsB;AACpB,QAAA,KAAA,CAAA,kBAAA,CAAA,WAAA;AACD;;AAED,MAAA,KAAA,CAAA,aAAA,GAAA,SAAA;AA3N2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,sBAAA,EA8NiB,UAAA,CAAA,EAAO;AACnE,UAAM3B,KAAK,GAAGyB,CAAC,CAADA,aAAAA,CAAd,KAAA;;AACA,UAAI,CAAC,KAAA,CAAL,mBAAA,EAA+B;AAC7B,QAAA,KAAA,CAAA,QAAA,CAAc;AACZlB,UAAAA,mBAAmB,EAAE,KAAA,CAAA,iBAAA,CAAuB,KAAA,CAAA,KAAA,CAAvB,OAAA,EAAA,KAAA;AADT,SAAd;AAGD;;AACD,UAAI,KAAA,CAAA,KAAA,CAAJ,QAAA,EAAyB;AACvB,QAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA;AACD;AAvO0C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,qBAAA,EA0OvB,UAAA,KAAA,EAA0B;AAAA,UACtCH,MADsC,GAC3B,KAAA,CAD2B,KAC3B,CAD2B,MAAA;;AAG9C,UAAIS,KAAK,CAALA,GAAAA,CAAAA,MAAAA,KAAAA,CAAAA,IAA0BA,KAAK,CAALA,GAAAA,KAA9B,GAAA,EAAiD;AAC/C,QAAA,KAAA,CAAA,eAAA,CAAqBA,KAAK,CAA1B,GAAA;;AAEA;AACD;;AAED,cAAQA,KAAK,CAAb,GAAA;AACE,aAAA,SAAA;AACEA,UAAAA,KAAK,CAALA,cAAAA;AACAT,UAAAA,MAAM,GAAG,KAAA,CAAA,WAAA,CAAH,MAAG,CAAH,GAA8B,KAAA,CAApCA,IAAoC,EAApCA;AACA;;AACF,aAAA,WAAA;AACES,UAAAA,KAAK,CAALA,cAAAA;AACAT,UAAAA,MAAM,GAAG,KAAA,CAAA,WAAA,CAAH,MAAG,CAAH,GAA8B,KAAA,CAApCA,IAAoC,EAApCA;AACA;;AACF,aAAA,QAAA;AACES,UAAAA,KAAK,CAALA,cAAAA;;AACA,UAAA,KAAA,CAAA,KAAA;;AACA;;AACF,aAAA,OAAA;AACA,aAAA,UAAA;AACA,aAAA,GAAA;AACEA,UAAAA,KAAK,CAALA,cAAAA;AACAT,UAAAA,MAAM,GAAG,KAAA,CAAH,aAAG,EAAH,GAA0B,KAAA,CAAhCA,IAAgC,EAAhCA;AACA;AAlBJ;AAnP2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,aAAA,EAyQ/ByB,QAAQ,CAAC,KAAA,CAAD,kBAAA,EAzQuB,IAyQvB,CAzQuB,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,cAAA,EAgS9B,UAAA,MAAA,EAAA,KAAA,EAAwD;AAAA,UAAA,WAAA,GACjB,KAAA,CADiB,KAAA;AAAA,UAC7DvB,kBAD6D,GAAA,WAAA,CAAA,kBAAA;AAAA,UACzCC,mBADyC,GAAA,WAAA,CAAA,mBAAA;AAAA,UAE7DT,YAF6D,GAE5C,KAAA,CAF4C,KAE5C,CAF4C,YAAA;AAGrE,UAAMkC,OAAO,GAAGpB,KAAK,KAArB,kBAAA;AACA,UAAMqB,QAAQ,GAAGrB,KAAK,KAAtB,mBAAA;AAEA,aACE,mBAAA,CAAC,KAAD,CAAA,QAAA,EAAA;AAAgB,QAAA,GAAG,EAAA,GAAA,MAAA,CAAKgB,MAAM,CAAX,KAAA;AAAnB,OAAA,EACG9B,YAAY,CAAC;AACZ8B,QAAAA,MAAM,EADM,MAAA;AAEZI,QAAAA,OAAO,EAFK,OAAA;AAGZE,QAAAA,QAAQ,EAAEN,MAAM,CAHJ,KAAA;AAIZK,QAAAA,QAAQ,EAJI,QAAA;AAKZE,QAAAA,OAAO,EAAE,KAAA,CALG,aAAA;AAMZC,QAAAA,WAAW,EAAE,KAAA,CAND,gBAAA;AAOZC,QAAAA,YAAY,EAAE,KAAA,CAAKC;AAPP,OAAD,CADf,CADF;AAtS2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EAqTnC,UAAA,OAAA,EAA+B;AACvC,MAAA,KAAA,CAAA,IAAA,GAAA,OAAA;AACAC,MAAAA,MAAM,CAAA,OAAA,EAAU,KAAA,CAAA,KAAA,CAAhBA,UAAM,CAANA;AAvT2C,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EA0TjC,UAAA,OAAA,EAAgC;AAC1C,MAAA,KAAA,CAAA,QAAA,GAAA,OAAA;AACAA,MAAAA,MAAM,CAAA,OAAA,EAAU,KAAA,CAAA,KAAA,CAAhBA,MAAM,CAANA;AA5T2C,KAAA,CAAA;;AAAA,QAGnCvC,MAHmC,GAGXE,KAHW,CAAA,KAAA;AAAA,QAG5BD,YAH4B,GAGXC,KAHW,CAAA,YAAA;AAK3C,QAAMC,YAAY,GAAGH,MAAK,KAALA,SAAAA,GAAAA,MAAAA,GAArB,YAAA;AAEA,IAAA,KAAA,CAAA,aAAA,GAAA,EAAA;AAEA,IAAA,KAAA,CAAA,KAAA,GAAa;AACXI,MAAAA,MAAM,EADK,KAAA;AAEXC,MAAAA,OAAO,EAFI,KAAA;AAGXC,MAAAA,kBAAkB,EAAE,CAHT,CAAA;AAIXC,MAAAA,mBAAmB,EAAE,KAAA,CAAA,iBAAA,CAAuBL,KAAK,CAA5B,OAAA,EAJV,YAIU,CAJV;AAKXM,MAAAA,iBAAiB,EAAEL;AALR,KAAb;;AAQA,QAAID,KAAK,CAALA,KAAAA,KAAJ,SAAA,EAA+B;AAC7B,MAAA,KAAA,CAAA,mBAAA,GAAA,IAAA;AACD;;AAnB0C,WAAA,KAAA;AAoB5C;;;;sCAwBiBH,O,EAAwCC,K,EAAoB;AAC5E,aAAO,OAAO,CAAP,SAAA,CAAkB,UAAA,IAAA,EAAU;AACjCA,QAAAA,KAAK,GAAG,OAAOU,IAAI,CAAX,KAAA,KAAA,QAAA,GAAiCC,MAAM,CAAvC,KAAuC,CAAvC,GAARX,KAAAA;AACA,eAAOU,IAAI,CAAJA,KAAAA,KAAP,KAAA;AAFF,OAAO,CAAP;AAID;;;iCAwBoBE,K,EAAe;AAClC,aAAOA,KAAK,IAALA,CAAAA,IAAcA,KAAK,GAAG,KAAA,KAAA,CAAA,OAAA,CAA7B,MAAA;AACD;;;oCA2DuBA,K,EAA+B;AAAA,UAAhBI,MAAgB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,KAAO;AACrD,UAAMC,QAAQ,GAAG,KAAA,YAAA,CAAjB,OAAA;AACA,UAAMP,IAAI,GAAGO,QAAQ,GAAIA,QAAQ,CAARA,QAAAA,CAAJ,KAAIA,CAAJ,GAArB,IAAA;;AAEA,UAAI,CAAJ,IAAA,EAAW;AACT;AACD;;AAED,UAAMC,cAAc,GAAGD,QAAQ,CAA/B,YAAA;AACA,UAAME,SAAS,GAAGF,QAAQ,CAA1B,SAAA;AACA,UAAMG,OAAO,GAAGV,IAAI,CAApB,SAAA;AACA,UAAMW,UAAU,GAAGX,IAAI,CAAvB,YAAA;;AAEA,UAAA,MAAA,EAAY;AACVO,QAAAA,QAAQ,CAARA,SAAAA,GAAqBG,OAAO,GAAGF,cAAc,GAAxBE,CAAAA,GAA+BC,UAAU,GAA9DJ,CAAAA;AADF,OAAA,MAEO,IAAIG,OAAO,GAAPA,UAAAA,GAAuBF,cAAc,GAAzC,SAAA,EAAuD;AAC5DD,QAAAA,QAAQ,CAARA,SAAAA,GAAqBG,OAAO,GAAPA,cAAAA,GAArBH,UAAAA;AADK,OAAA,MAEA,IAAIG,OAAO,GAAX,SAAA,EAAyB;AAC9BH,QAAAA,QAAQ,CAARA,SAAAA,GAAAA,OAAAA;AACD;AACF;;;wCAiHmB;AAClBa,MAAAA,QAAQ,CAARA,gBAAAA,CAAAA,OAAAA,EAAmC,KAAnCA,mBAAAA,EAAAA,KAAAA;AACAA,MAAAA,QAAQ,CAARA,gBAAAA,CAAAA,UAAAA,EAAsC,KAAtCA,mBAAAA,EAAAA,KAAAA;AACD;;;2CAEsB;AACrBA,MAAAA,QAAQ,CAARA,mBAAAA,CAAAA,OAAAA,EAAsC,KAAtCA,mBAAAA,EAAAA,KAAAA;AACAA,MAAAA,QAAQ,CAARA,mBAAAA,CAAAA,UAAAA,EAAyC,KAAzCA,mBAAAA,EAAAA,KAAAA;AACD;;;uCAEkBC,S,EAA8B;AAC/C,UAAIA,SAAS,CAATA,KAAAA,KAAoB,KAAA,KAAA,CAApBA,KAAAA,IAAwCA,SAAS,CAATA,OAAAA,KAAsB,KAAA,KAAA,CAAlE,OAAA,EAAsF;AACpF,aAAA,mBAAA,GAA2B,KAAA,KAAA,CAAA,KAAA,KAA3B,SAAA;AACA,YAAM/B,KAAK,GAAG,KAAA,KAAA,CAAA,KAAA,KAAA,SAAA,GAAiC,KAAA,KAAA,CAAjC,iBAAA,GAAgE,KAAA,KAAA,CAA9E,KAAA;AACA,aAAA,QAAA,CAAc;AACZQ,UAAAA,iBAAiB,EADL,KAAA;AAEZD,UAAAA,mBAAmB,EAAE,KAAA,iBAAA,CAAuB,KAAA,KAAA,CAAvB,OAAA,EAAA,KAAA;AAFT,SAAd;AAID;AACF;;;6BAiCQ;AAAA,UAAA,YAAA,GAC+B,KAD/B,KAAA;AAAA,UACCH,MADD,GAAA,YAAA,CAAA,MAAA;AAAA,UACSI,iBADT,GAAA,YAAA,CAAA,iBAAA;;AAAA,UAAA,WAAA,GAkBH,KAlBG,KAAA;AAAA,UAGLgC,IAHK,GAAA,WAAA,CAAA,IAAA;AAAA,UAILC,SAJK,GAAA,WAAA,CAAA,SAAA;AAAA,UAKLC,MALK,GAAA,WAAA,CAAA,MAAA;AAAA,UAMLC,UANK,GAAA,WAAA,CAAA,UAAA;AAAA,UAOLC,cAPK,GAAA,WAAA,CAAA,cAAA;AAAA,UAQL7C,OARK,GAAA,WAAA,CAAA,OAAA;AAAA,UASL8C,KATK,GAAA,WAAA,CAAA,KAAA;AAAA,UAULC,QAVK,GAAA,WAAA,CAAA,QAAA;AAAA,UAWLC,KAXK,GAAA,WAAA,CAAA,KAAA;AAAA,UAYLC,QAZK,GAAA,WAAA,CAAA,QAAA;AAAA,UAaLC,MAbK,GAAA,WAAA,CAAA,MAAA;AAAA,UAcLC,OAdK,GAAA,WAAA,CAAA,OAAA;AAAA,UAeLpD,YAfK,GAAA,WAAA,CAAA,YAAA;AAAA,UAgBLoC,QAhBK,GAAA,WAAA,CAAA,QAAA;AAAA,UAiBFiB,SAjBE,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,MAAA,EAAA,WAAA,EAAA,QAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,SAAA,EAAA,OAAA,EAAA,UAAA,EAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,SAAA,EAAA,cAAA,EAAA,UAAA,CAAA,CAAA;;AAmBP,UAAMlB,QAAQ,GAAG,KAAjB,eAAiB,EAAjB;AACA,UAAMmB,KAAK,GAAGnB,QAAQ,GAAGA,QAAQ,CAAX,KAAA,GAAtB,SAAA;AAEA,aACE,mBAAA,CAAA,OAAA,EAAA;AACE,QAAA,SAAS,EAAEoB,YAAY,CAAA,cAAA,EADzB,QACyB,CADzB;AAEE,QAAA,SAAS,EAFX,SAAA;AAGE,QAAA,KAAK,EAHP,KAAA;AAIE,QAAA,GAAG,EAAE,KAAKC;AAJZ,OAAA,EAME,mBAAA,CAAA,aAAA,EAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEE,uBAFF,IAAA;AAGE,QAAA,OAAO,EAAE,KAHX,OAAA;AAIE,QAAA,SAAS,EAAE,KAJb,mBAAA;AAKE,QAAA,OAAO,EAAE,KALX,WAAA;AAME,QAAA,OAAO,EAAE,KANX,OAAA;AAOE,QAAA,MAAM,EAAE,KAPV,MAAA;AAQE,QAAA,SAAS,EAAEC,UAAU,CAAC;AACpB,gCADoB,MAAA;AAEpB,mDAAyCX,cAAc,KAAK;AAFxC,SAAD,CARvB;AAYE,QAAA,SAAS,EAAEH;AAZb,OAAA,CAAA,EANF,KAME,CANF,EAsBE,mBAAA,CAAA,QAAA,EAAA;AACE,QAAA,GAAG,EAAE,KADP,SAAA;AAEE,QAAA,IAAI,EAFN,IAAA;AAGE,QAAA,QAAQ,EAAE,KAHZ,oBAAA;AAIE,QAAA,MAAM,EAJR,MAAA;AAKE,QAAA,OAAO,EALT,OAAA;AAME,QAAA,KAAK,EANP,iBAAA;AAOE,QAAA,SAAS,EAAC;AAPZ,OAAA,EASG,OAAO,CAAP,GAAA,CAAY,UAAA,IAAA,EAAA;AAAA,eAAU,mBAAA,CAAA,QAAA,EAAA;AAAQ,UAAA,GAAG,EAAA,GAAA,MAAA,CAAK/B,IAAI,CAApB,KAAW,CAAX;AAA8B,UAAA,KAAK,EAAEA,IAAI,CAACV;AAA1C,SAAA,CAAV;AA/BjB,OA+BK,CATH,CAtBF,EAiCGI,MAAM,IACP,mBAAA,CAAA,KAAA,EAAA;AACE,QAAA,SAAS,EAAEmD,UAAU,CAAA,uBAAA,EAAA,gCAAA,MAAA,CAAA,KAAA,CAAA,EAAmE;AACtF,sDAA4CX,cAAc,KAAK;AADuB,SAAnE,CADvB;AAIE,QAAA,YAAY,EAAE,KAAKY;AAJrB,OAAA,EAME,mBAAA,CAAA,gBAAA,EAAA;AAAkB,QAAA,MAAM,EAAE,KAAKC;AAA/B,OAAA,EACG1D,OAAO,CAAPA,GAAAA,CAAY,KA1CrB,YA0CSA,CADH,CANF,CAlCF,CADF;AAgDD;;;;EA/YwBH,KAAK,CAACC,S;;gBAA3BF,Y,kBACqC;AACvCG,EAAAA,YADuC,EAAA,SAAA,YAAA,CAAA,KAAA,EACiB;AACtD,WACE,mBAAA,CAAA,kBAAA,EADF,KACE,CADF;AAFqC,GAAA;AAMvCC,EAAAA,OAAO,EAAE;AAN8B,C;;AAiZ3C,eAAe2D,YAAY,CAACC,cAAc,CAAA,YAAA,EAAe;AACvDd,EAAAA,KAAK,EAAE;AADgD,CAAf,CAAf,CAA3B","sourcesContent":["import React, {\n  ChangeEventHandler,\n  createRef,\n  KeyboardEvent,\n  MouseEvent,\n  ReactNode,\n  SelectHTMLAttributes,\n} from 'react';\nimport SelectMimicry from '../SelectMimicry/SelectMimicry';\nimport { debounce, setRef } from '../../lib/utils';\nimport { classNames } from '../../lib/classNames';\nimport { NativeSelectProps } from '../NativeSelect/NativeSelect';\nimport CustomScrollView from '../CustomScrollView/CustomScrollView';\nimport { withAdaptivity } from '../../hoc/withAdaptivity';\nimport { withPlatform } from '../../hoc/withPlatform';\nimport CustomSelectOption, { CustomSelectOptionProps } from '../CustomSelectOption/CustomSelectOption';\nimport { getClassName } from '../../helpers/getClassName';\nimport { FormFieldProps } from '../FormField/FormField';\nimport { HasPlatform } from '../../types';\n\ntype SelectValue = SelectHTMLAttributes<HTMLSelectElement>['value'];\n\nexport interface CustomSelectOptionInterface {\n  value: SelectValue;\n  label: string;\n  [index: string]: any;\n}\n\ninterface CustomSelectState {\n  opened?: boolean;\n  focused?: boolean;\n  focusedOptionIndex?: number;\n  selectedOptionIndex?: number;\n  nativeSelectValue?: SelectValue;\n}\n\nexport interface CustomSelectProps extends NativeSelectProps, HasPlatform, FormFieldProps {\n  options: Array<{\n    value: SelectValue;\n    label: string;\n    [index: string]: any;\n  }>;\n  popupDirection?: 'top' | 'bottom';\n  /**\n   * В качестве аргумента принимает валидные для [CustomSelectOption](#/CustomSelectOption) свойства\n   */\n  renderOption?: (props: CustomSelectOptionProps) => ReactNode;\n}\n\ntype MouseEventHandler = (event: MouseEvent<HTMLElement>) => void;\n\nclass CustomSelect extends React.Component<CustomSelectProps, CustomSelectState> {\n  static defaultProps: CustomSelectProps = {\n    renderOption(props: CustomSelectOptionProps): ReactNode {\n      return (\n        <CustomSelectOption {...props} />\n      );\n    },\n    options: [],\n  };\n\n  public constructor(props: CustomSelectProps) {\n    super(props);\n\n    const { value, defaultValue } = props;\n\n    const initialValue = value !== undefined ? value : defaultValue;\n\n    this.keyboardInput = '';\n\n    this.state = {\n      opened: false,\n      focused: false,\n      focusedOptionIndex: -1,\n      selectedOptionIndex: this.findSelectedIndex(props.options, initialValue),\n      nativeSelectValue: initialValue,\n    };\n\n    if (props.value !== undefined) {\n      this.isControlledOutside = true;\n    }\n  }\n\n  public state: CustomSelectState;\n  private keyboardInput: string;\n  private isControlledOutside: boolean;\n  private node: HTMLLabelElement;\n  private selectEl: HTMLSelectElement;\n  private readonly scrollBoxRef = createRef<HTMLDivElement>();\n\n  private readonly resetKeyboardInput = () => {\n    this.keyboardInput = '';\n  };\n\n  private readonly getSelectedItem = () => {\n    const { selectedOptionIndex } = this.state;\n    const { options } = this.props;\n\n    if (!options.length) {\n      return null;\n    }\n\n    return options[selectedOptionIndex];\n  };\n\n  findSelectedIndex(options: CustomSelectOptionInterface[], value: SelectValue) {\n    return options.findIndex((item) => {\n      value = typeof item.value === 'number' ? Number(value) : value;\n      return item.value === value;\n    });\n  }\n\n  open = () => {\n    this.setState(({ selectedOptionIndex }) => ({\n      opened: true,\n      focusedOptionIndex: selectedOptionIndex,\n    }), () => {\n      const { selectedOptionIndex } = this.state;\n\n      if (this.isValidIndex(selectedOptionIndex)) {\n        this.scrollToElement(selectedOptionIndex, true);\n      }\n    });\n  };\n\n  close = () => {\n    this.resetKeyboardInput();\n\n    this.setState(() => ({\n      opened: false,\n      focusedOptionIndex: -1,\n    }));\n  };\n\n  private isValidIndex(index: number) {\n    return index >= 0 && index < this.props.options.length;\n  }\n\n  selectFocused = () => {\n    const { focusedOptionIndex } = this.state;\n\n    this.select(focusedOptionIndex);\n  };\n\n  select = (index: number) => {\n    const { options } = this.props;\n\n    if (!this.isValidIndex(index)) {\n      return;\n    }\n\n    const item = options[index];\n\n    this.setState({\n      nativeSelectValue: item.value,\n    }, () => {\n      const event = new Event('change', { bubbles: true });\n      this.selectEl.dispatchEvent(event);\n    });\n    this.close();\n  };\n\n  onClick = () => {\n    this.state.opened ? this.close() : this.open();\n  };\n\n  onFocus = () => {\n    this.setState(() => ({\n      focused: true,\n    }));\n\n    const event = new Event('focus');\n    this.selectEl.dispatchEvent(event);\n  };\n\n  onBlur = () => {\n    this.resetKeyboardInput();\n\n    this.setState(() => ({\n      opened: false,\n      focused: false,\n    }));\n\n    const event = new Event('blur');\n    this.selectEl.dispatchEvent(event);\n  };\n\n  handleDocumentClick = (event: Event) => {\n    const thisNode = this.node;\n\n    if (this.state.opened && thisNode && !thisNode.contains(event.target as Node)) {\n      this.onBlur();\n    }\n  };\n\n  private scrollToElement(index: number, center = false) {\n    const dropdown = this.scrollBoxRef.current;\n    const item = dropdown ? (dropdown.children[index] as HTMLElement) : null;\n\n    if (!item) {\n      return;\n    }\n\n    const dropdownHeight = dropdown.offsetHeight;\n    const scrollTop = dropdown.scrollTop;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  }\n\n  focusOptionByIndex = (index: number) => {\n    const { focusedOptionIndex } = this.state;\n    const { options } = this.props;\n    const oldIndex = focusedOptionIndex;\n\n    if (index < 0) {\n      index = options.length - 1;\n    } else if (index >= options.length) {\n      index = 0;\n    }\n\n    if (index === oldIndex) {\n      return;\n    }\n\n    this.scrollToElement(index);\n\n    this.setState(() => ({\n      focusedOptionIndex: index,\n    }));\n  };\n\n  focusOption = (type: 'next' | 'prev') => {\n    const { focusedOptionIndex } = this.state;\n    let index = focusedOptionIndex;\n\n    if (type === 'next') {\n      index = focusedOptionIndex + 1;\n    } else if (type === 'prev') {\n      index = focusedOptionIndex - 1;\n    }\n\n    this.focusOptionByIndex(index);\n  };\n\n  handleOptionHover: MouseEventHandler = (e: MouseEvent<HTMLElement>) => {\n    this.setState({\n      focusedOptionIndex: Array.prototype.indexOf.call(e.currentTarget.parentNode.children, e.currentTarget),\n    });\n  };\n\n  handleOptionDown: MouseEventHandler = (e: MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n  };\n\n  resetFocusedOption = () => {\n    this.setState(() => ({\n      focusedOptionIndex: -1,\n    }));\n  };\n\n  onKeyboardInput = (key: string) => {\n    const { options } = this.props;\n    const fullInput = this.keyboardInput + key;\n\n    const optionIndex = options.findIndex((option) => {\n      return option.label.toLowerCase().includes(fullInput);\n    });\n\n    if (optionIndex > -1) {\n      this.focusOptionByIndex(optionIndex);\n    }\n\n    this.keyboardInput = fullInput;\n  };\n\n  onNativeSelectChange: ChangeEventHandler<HTMLSelectElement> = (e) => {\n    const value = e.currentTarget.value;\n    if (!this.isControlledOutside) {\n      this.setState({\n        selectedOptionIndex: this.findSelectedIndex(this.props.options, value),\n      });\n    }\n    if (this.props.onChange) {\n      this.props.onChange(e);\n    }\n  };\n\n  handleKeyDownSelect = (event: KeyboardEvent) => {\n    const { opened } = this.state;\n\n    if (event.key.length === 1 && event.key !== ' ') {\n      this.onKeyboardInput(event.key);\n\n      return;\n    }\n\n    switch (event.key) {\n      case 'ArrowUp':\n        event.preventDefault();\n        opened ? this.focusOption('prev') : this.open();\n        break;\n      case 'ArrowDown':\n        event.preventDefault();\n        opened ? this.focusOption('next') : this.open();\n        break;\n      case 'Escape':\n        event.preventDefault();\n        this.close();\n        break;\n      case 'Enter':\n      case 'Spacebar':\n      case ' ':\n        event.preventDefault();\n        opened ? this.selectFocused() : this.open();\n        break;\n    }\n  };\n\n  handleKeyUp = debounce(this.resetKeyboardInput, 1000);\n\n  componentDidMount() {\n    document.addEventListener('click', this.handleDocumentClick, false);\n    document.addEventListener('touchend', this.handleDocumentClick, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleDocumentClick, false);\n    document.removeEventListener('touchend', this.handleDocumentClick, false);\n  }\n\n  componentDidUpdate(prevProps: CustomSelectProps) {\n    if (prevProps.value !== this.props.value || prevProps.options !== this.props.options) {\n      this.isControlledOutside = this.props.value !== undefined;\n      const value = this.props.value === undefined ? this.state.nativeSelectValue : this.props.value;\n      this.setState({\n        nativeSelectValue: value,\n        selectedOptionIndex: this.findSelectedIndex(this.props.options, value),\n      });\n    }\n  }\n\n  renderOption = (option: CustomSelectOptionInterface, index: number) => {\n    const { focusedOptionIndex, selectedOptionIndex } = this.state;\n    const { renderOption } = this.props;\n    const hovered = index === focusedOptionIndex;\n    const selected = index === selectedOptionIndex;\n\n    return (\n      <React.Fragment key={`${option.value}`}>\n        {renderOption({\n          option,\n          hovered,\n          children: option.label,\n          selected,\n          onClick: this.selectFocused,\n          onMouseDown: this.handleOptionDown,\n          onMouseEnter: this.handleOptionHover,\n        })}\n      </React.Fragment>\n    );\n  };\n\n  rootRef = (element: HTMLLabelElement) => {\n    this.node = element;\n    setRef(element, this.props.getRootRef);\n  };\n\n  selectRef = (element: HTMLSelectElement) => {\n    this.selectEl = element;\n    setRef(element, this.props.getRef);\n  };\n\n  render() {\n    const { opened, nativeSelectValue } = this.state;\n    const {\n      name,\n      className,\n      getRef,\n      getRootRef,\n      popupDirection,\n      options,\n      sizeY,\n      platform,\n      style,\n      onChange,\n      onBlur,\n      onFocus,\n      renderOption,\n      children,\n      ...restProps\n    } = this.props;\n    const selected = this.getSelectedItem();\n    const label = selected ? selected.label : undefined;\n\n    return (\n      <label\n        vkuiClass={getClassName('CustomSelect', platform)}\n        className={className}\n        style={style}\n        ref={this.rootRef}\n      >\n        <SelectMimicry\n          {...restProps}\n          aria-hidden={true}\n          onClick={this.onClick}\n          onKeyDown={this.handleKeyDownSelect}\n          onKeyUp={this.handleKeyUp}\n          onFocus={this.onFocus}\n          onBlur={this.onBlur}\n          vkuiClass={classNames({\n            'CustomSelect__open': opened,\n            'CustomSelect__open--popupDirectionTop': popupDirection === 'top',\n          })}\n          className={className}\n        >\n          {label}\n        </SelectMimicry>\n        <select\n          ref={this.selectRef}\n          name={name}\n          onChange={this.onNativeSelectChange}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          value={nativeSelectValue}\n          vkuiClass=\"CustomSelect__control\"\n        >\n          {options.map((item) => <option key={`${item.value}`} value={item.value} />)}\n        </select>\n        {opened &&\n        <div\n          vkuiClass={classNames('CustomSelect__options', `CustomSelect__options--sizeY-${sizeY}`, {\n            'CustomSelect__options--popupDirectionTop': popupDirection === 'top',\n          })}\n          onMouseLeave={this.resetFocusedOption}\n        >\n          <CustomScrollView boxRef={this.scrollBoxRef}>\n            {options.map(this.renderOption)}\n          </CustomScrollView>\n        </div>\n        }\n      </label>\n    );\n  }\n}\n\nexport default withPlatform(withAdaptivity(CustomSelect, {\n  sizeY: true,\n}));\n"]},"metadata":{},"sourceType":"module"}