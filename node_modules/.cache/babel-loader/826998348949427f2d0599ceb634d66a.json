{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { hasReactNode } from \"../../lib/utils\";\nimport Caption from \"../Typography/Caption/Caption\";\nimport Tappable from \"../Tappable/Tappable\";\nimport Subhead from \"../Typography/Subhead/Subhead\";\nimport Avatar from \"../Avatar/Avatar\";\n\nvar CellTypography = function CellTypography(_ref) {\n  var size = _ref.size,\n      children = _ref.children,\n      restProps = _objectWithoutProperties(_ref, [\"size\", \"children\"]);\n\n  return size === 's' ? createScopedElement(Caption, _extends({\n    level: \"2\",\n    weight: \"regular\"\n  }, restProps), children) : createScopedElement(Subhead, _extends({\n    weight: \"regular\"\n  }, restProps), children);\n};\n\nexport var HorizontalCell = function HorizontalCell(props) {\n  var className = props.className,\n      header = props.header,\n      subtitle = props.subtitle,\n      size = props.size,\n      style = props.style,\n      children = props.children,\n      getRootRef = props.getRootRef,\n      getRef = props.getRef,\n      restProps = _objectWithoutProperties(props, [\"className\", \"header\", \"subtitle\", \"size\", \"style\", \"children\", \"getRootRef\", \"getRef\"]);\n\n  var platform = usePlatform();\n  return createScopedElement(\"div\", {\n    vkuiClass: classNames(getClassName('HorizontalCell', platform), \"HorizontalCell--\".concat(size)),\n    ref: getRootRef,\n    style: style,\n    className: className\n  }, createScopedElement(Tappable, _extends({\n    getRootRef: getRef\n  }, restProps), hasReactNode(children) && createScopedElement(\"div\", {\n    vkuiClass: \"HorizontalCell__image\"\n  }, children), createScopedElement(\"div\", {\n    vkuiClass: \"HorizontalCell__content\"\n  }, hasReactNode(header) && createScopedElement(CellTypography, {\n    size: size,\n    vkuiClass: \"HorizontalCell__title\"\n  }, header), hasReactNode(subtitle) && createScopedElement(Caption, {\n    weight: \"regular\",\n    level: \"1\",\n    vkuiClass: \"HorizontalCell__subtitle\"\n  }, subtitle))));\n};\nHorizontalCell.defaultProps = {\n  size: 's',\n  children: createScopedElement(Avatar, {\n    size: 56\n  })\n};","map":{"version":3,"sources":["../../../src/components/HorizontalCell/HorizontalCell.tsx"],"names":["CellTypography","size","children","restProps","HorizontalCell","className","header","subtitle","style","getRootRef","getRef","props","platform","usePlatform","classNames","getClassName","hasReactNode"],"mappings":"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","sourcesContent":["import { FC, HTMLAttributes, ReactNode } from 'react';\nimport { classNames } from '../../lib/classNames';\nimport { getClassName } from '../../helpers/getClassName';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { hasReactNode } from '../../lib/utils';\nimport Caption from '../Typography/Caption/Caption';\nimport Tappable from '../Tappable/Tappable';\nimport Subhead from '../Typography/Subhead/Subhead';\nimport Avatar from '../Avatar/Avatar';\nimport { HasRef, HasRootRef } from '../../types';\n\ninterface CellTypographyProps extends HTMLAttributes<HTMLDivElement> {\n  size: HorizontalCellProps['size'];\n}\n\nconst CellTypography: FC<CellTypographyProps> = ({ size, children, ...restProps }: CellTypographyProps) => {\n  return size === 's'\n    ? <Caption level=\"2\" weight=\"regular\" {...restProps}>{children}</Caption>\n    : <Subhead weight=\"regular\" {...restProps}>{children}</Subhead>;\n};\n\nexport interface HorizontalCellProps extends HTMLAttributes<HTMLDivElement>, HasRootRef<HTMLDivElement>, HasRef<HTMLDivElement> {\n  size?: 's' | 'm' | 'l';\n  header?: ReactNode;\n  subtitle?: ReactNode;\n}\n\nexport const HorizontalCell: FC<HorizontalCellProps> = (props: HorizontalCellProps) => {\n  const { className, header, subtitle, size, style, children, getRootRef, getRef, ...restProps } = props;\n  const platform = usePlatform();\n\n  return (\n    <div vkuiClass={classNames(getClassName('HorizontalCell', platform), `HorizontalCell--${size}`)} ref={getRootRef} style={style} className={className}>\n      <Tappable getRootRef={getRef} {...restProps}>\n        {hasReactNode(children) && <div vkuiClass=\"HorizontalCell__image\">{children}</div>}\n        <div vkuiClass=\"HorizontalCell__content\">\n          {hasReactNode(header) && (\n            <CellTypography size={size} vkuiClass=\"HorizontalCell__title\">{header}</CellTypography>\n          )}\n          {hasReactNode(subtitle) && <Caption weight=\"regular\" level=\"1\" vkuiClass=\"HorizontalCell__subtitle\">{subtitle}</Caption>}\n        </div>\n      </Tappable>\n    </div>\n  );\n};\n\nHorizontalCell.defaultProps = {\n  size: 's',\n  children: <Avatar size={56} />,\n};\n"]},"metadata":{},"sourceType":"module"}